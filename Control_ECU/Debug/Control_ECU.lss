
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000029c8  00002a5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800072  00800072  00002a6e  2**0
                  ALLOC
  3 .stab         00002bb0  00000000  00000000  00002a70  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001460  00000000  00000000  00005620  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008979  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009864  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a614  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a774  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000aa01  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b1cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 1a 12 	jmp	0x2434	; 0x2434 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 e7 11 	jmp	0x23ce	; 0x23ce <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ec       	ldi	r30, 0xC8	; 200
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 37       	cpi	r26, 0x78	; 120
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <main>
      8a:	0c 94 e2 14 	jmp	0x29c4	; 0x29c4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c7 14 	jmp	0x298e	; 0x298e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b7 14 	jmp	0x296e	; 0x296e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d3 14 	jmp	0x29a6	; 0x29a6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b7 14 	jmp	0x296e	; 0x296e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d3 14 	jmp	0x29a6	; 0x29a6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c7 14 	jmp	0x298e	; 0x298e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b7 14 	jmp	0x296e	; 0x296e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d3 14 	jmp	0x29a6	; 0x29a6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b7 14 	jmp	0x296e	; 0x296e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d3 14 	jmp	0x29a6	; 0x29a6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b7 14 	jmp	0x296e	; 0x296e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d3 14 	jmp	0x29a6	; 0x29a6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 bb 14 	jmp	0x2976	; 0x2976 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d7 14 	jmp	0x29ae	; 0x29ae <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <start>:
Timer1_Configtype timerConfig = {COMPARE,0,7813,P_1024};

UART_ConfigType uartConfig = {Disabled,one,_9600};

void start(void)
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	c0 58       	subi	r28, 0x80	; 128
     b54:	d0 40       	sbci	r29, 0x00	; 0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
	SREG |= (1<<7);
     b60:	af e5       	ldi	r26, 0x5F	; 95
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	ef e5       	ldi	r30, 0x5F	; 95
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	80 81       	ld	r24, Z
     b6a:	80 68       	ori	r24, 0x80	; 128
     b6c:	8c 93       	st	X, r24


	DcMotor_Init();
     b6e:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <DcMotor_Init>
	Timer1_setCallBack(timerHandler);
     b72:	8b e0       	ldi	r24, 0x0B	; 11
     b74:	9c e0       	ldi	r25, 0x0C	; 12
     b76:	0e 94 d7 12 	call	0x25ae	; 0x25ae <Timer1_setCallBack>
    Buzzer_init();
     b7a:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <Buzzer_init>

	UART_init(&uartConfig);
     b7e:	8e e6       	ldi	r24, 0x6E	; 110
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	0e 94 87 13 	call	0x270e	; 0x270e <UART_init>
     b86:	d1 c0       	rjmp	.+418    	; 0xd2a <start+0x1e4>

	uint8 password[5] , confirmPassword[5] , passwordVerified , command;

	while(passwordVerified == 0)
	{
		Password_Rec(password);
     b88:	ce 01       	movw	r24, r28
     b8a:	8d 58       	subi	r24, 0x8D	; 141
     b8c:	9f 4f       	sbci	r25, 0xFF	; 255
     b8e:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <Password_Rec>

		Password_Rec(confirmPassword);
     b92:	ce 01       	movw	r24, r28
     b94:	88 58       	subi	r24, 0x88	; 136
     b96:	9f 4f       	sbci	r25, 0xFF	; 255
     b98:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <Password_Rec>

		passwordVerified = Password_Ver(password, confirmPassword);
     b9c:	ce 01       	movw	r24, r28
     b9e:	8d 58       	subi	r24, 0x8D	; 141
     ba0:	9f 4f       	sbci	r25, 0xFF	; 255
     ba2:	9e 01       	movw	r18, r28
     ba4:	28 58       	subi	r18, 0x88	; 136
     ba6:	3f 4f       	sbci	r19, 0xFF	; 255
     ba8:	b9 01       	movw	r22, r18
     baa:	0e 94 9c 0b 	call	0x1738	; 0x1738 <Password_Ver>
     bae:	fe 01       	movw	r30, r28
     bb0:	ee 58       	subi	r30, 0x8E	; 142
     bb2:	ff 4f       	sbci	r31, 0xFF	; 255
     bb4:	80 83       	st	Z, r24
		UART_sendByte(passwordVerified);
     bb6:	fe 01       	movw	r30, r28
     bb8:	ee 58       	subi	r30, 0x8E	; 142
     bba:	ff 4f       	sbci	r31, 0xFF	; 255
     bbc:	80 81       	ld	r24, Z
     bbe:	0e 94 f7 13 	call	0x27ee	; 0x27ee <UART_sendByte>
     bc2:	fe 01       	movw	r30, r28
     bc4:	e3 59       	subi	r30, 0x93	; 147
     bc6:	ff 4f       	sbci	r31, 0xFF	; 255
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	a8 e4       	ldi	r26, 0x48	; 72
     bce:	b2 e4       	ldi	r27, 0x42	; 66
     bd0:	80 83       	st	Z, r24
     bd2:	91 83       	std	Z+1, r25	; 0x01
     bd4:	a2 83       	std	Z+2, r26	; 0x02
     bd6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bd8:	8e 01       	movw	r16, r28
     bda:	07 59       	subi	r16, 0x97	; 151
     bdc:	1f 4f       	sbci	r17, 0xFF	; 255
     bde:	fe 01       	movw	r30, r28
     be0:	e3 59       	subi	r30, 0x93	; 147
     be2:	ff 4f       	sbci	r31, 0xFF	; 255
     be4:	60 81       	ld	r22, Z
     be6:	71 81       	ldd	r23, Z+1	; 0x01
     be8:	82 81       	ldd	r24, Z+2	; 0x02
     bea:	93 81       	ldd	r25, Z+3	; 0x03
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	4a ef       	ldi	r20, 0xFA	; 250
     bf2:	54 e4       	ldi	r21, 0x44	; 68
     bf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bf8:	dc 01       	movw	r26, r24
     bfa:	cb 01       	movw	r24, r22
     bfc:	f8 01       	movw	r30, r16
     bfe:	80 83       	st	Z, r24
     c00:	91 83       	std	Z+1, r25	; 0x01
     c02:	a2 83       	std	Z+2, r26	; 0x02
     c04:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c06:	fe 01       	movw	r30, r28
     c08:	e7 59       	subi	r30, 0x97	; 151
     c0a:	ff 4f       	sbci	r31, 0xFF	; 255
     c0c:	60 81       	ld	r22, Z
     c0e:	71 81       	ldd	r23, Z+1	; 0x01
     c10:	82 81       	ldd	r24, Z+2	; 0x02
     c12:	93 81       	ldd	r25, Z+3	; 0x03
     c14:	20 e0       	ldi	r18, 0x00	; 0
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	40 e8       	ldi	r20, 0x80	; 128
     c1a:	5f e3       	ldi	r21, 0x3F	; 63
     c1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c20:	88 23       	and	r24, r24
     c22:	44 f4       	brge	.+16     	; 0xc34 <start+0xee>
		__ticks = 1;
     c24:	fe 01       	movw	r30, r28
     c26:	e9 59       	subi	r30, 0x99	; 153
     c28:	ff 4f       	sbci	r31, 0xFF	; 255
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	91 83       	std	Z+1, r25	; 0x01
     c30:	80 83       	st	Z, r24
     c32:	64 c0       	rjmp	.+200    	; 0xcfc <start+0x1b6>
	else if (__tmp > 65535)
     c34:	fe 01       	movw	r30, r28
     c36:	e7 59       	subi	r30, 0x97	; 151
     c38:	ff 4f       	sbci	r31, 0xFF	; 255
     c3a:	60 81       	ld	r22, Z
     c3c:	71 81       	ldd	r23, Z+1	; 0x01
     c3e:	82 81       	ldd	r24, Z+2	; 0x02
     c40:	93 81       	ldd	r25, Z+3	; 0x03
     c42:	20 e0       	ldi	r18, 0x00	; 0
     c44:	3f ef       	ldi	r19, 0xFF	; 255
     c46:	4f e7       	ldi	r20, 0x7F	; 127
     c48:	57 e4       	ldi	r21, 0x47	; 71
     c4a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c4e:	18 16       	cp	r1, r24
     c50:	0c f0       	brlt	.+2      	; 0xc54 <start+0x10e>
     c52:	43 c0       	rjmp	.+134    	; 0xcda <start+0x194>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c54:	fe 01       	movw	r30, r28
     c56:	e3 59       	subi	r30, 0x93	; 147
     c58:	ff 4f       	sbci	r31, 0xFF	; 255
     c5a:	60 81       	ld	r22, Z
     c5c:	71 81       	ldd	r23, Z+1	; 0x01
     c5e:	82 81       	ldd	r24, Z+2	; 0x02
     c60:	93 81       	ldd	r25, Z+3	; 0x03
     c62:	20 e0       	ldi	r18, 0x00	; 0
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	40 e2       	ldi	r20, 0x20	; 32
     c68:	51 e4       	ldi	r21, 0x41	; 65
     c6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c6e:	dc 01       	movw	r26, r24
     c70:	cb 01       	movw	r24, r22
     c72:	8e 01       	movw	r16, r28
     c74:	09 59       	subi	r16, 0x99	; 153
     c76:	1f 4f       	sbci	r17, 0xFF	; 255
     c78:	bc 01       	movw	r22, r24
     c7a:	cd 01       	movw	r24, r26
     c7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c80:	dc 01       	movw	r26, r24
     c82:	cb 01       	movw	r24, r22
     c84:	f8 01       	movw	r30, r16
     c86:	91 83       	std	Z+1, r25	; 0x01
     c88:	80 83       	st	Z, r24
     c8a:	1f c0       	rjmp	.+62     	; 0xcca <start+0x184>
     c8c:	fe 01       	movw	r30, r28
     c8e:	eb 59       	subi	r30, 0x9B	; 155
     c90:	ff 4f       	sbci	r31, 0xFF	; 255
     c92:	88 ec       	ldi	r24, 0xC8	; 200
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	91 83       	std	Z+1, r25	; 0x01
     c98:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c9a:	fe 01       	movw	r30, r28
     c9c:	eb 59       	subi	r30, 0x9B	; 155
     c9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ca0:	80 81       	ld	r24, Z
     ca2:	91 81       	ldd	r25, Z+1	; 0x01
     ca4:	01 97       	sbiw	r24, 0x01	; 1
     ca6:	f1 f7       	brne	.-4      	; 0xca4 <start+0x15e>
     ca8:	fe 01       	movw	r30, r28
     caa:	eb 59       	subi	r30, 0x9B	; 155
     cac:	ff 4f       	sbci	r31, 0xFF	; 255
     cae:	91 83       	std	Z+1, r25	; 0x01
     cb0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cb2:	de 01       	movw	r26, r28
     cb4:	a9 59       	subi	r26, 0x99	; 153
     cb6:	bf 4f       	sbci	r27, 0xFF	; 255
     cb8:	fe 01       	movw	r30, r28
     cba:	e9 59       	subi	r30, 0x99	; 153
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	80 81       	ld	r24, Z
     cc0:	91 81       	ldd	r25, Z+1	; 0x01
     cc2:	01 97       	sbiw	r24, 0x01	; 1
     cc4:	11 96       	adiw	r26, 0x01	; 1
     cc6:	9c 93       	st	X, r25
     cc8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cca:	fe 01       	movw	r30, r28
     ccc:	e9 59       	subi	r30, 0x99	; 153
     cce:	ff 4f       	sbci	r31, 0xFF	; 255
     cd0:	80 81       	ld	r24, Z
     cd2:	91 81       	ldd	r25, Z+1	; 0x01
     cd4:	00 97       	sbiw	r24, 0x00	; 0
     cd6:	d1 f6       	brne	.-76     	; 0xc8c <start+0x146>
     cd8:	28 c0       	rjmp	.+80     	; 0xd2a <start+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cda:	8e 01       	movw	r16, r28
     cdc:	09 59       	subi	r16, 0x99	; 153
     cde:	1f 4f       	sbci	r17, 0xFF	; 255
     ce0:	fe 01       	movw	r30, r28
     ce2:	e7 59       	subi	r30, 0x97	; 151
     ce4:	ff 4f       	sbci	r31, 0xFF	; 255
     ce6:	60 81       	ld	r22, Z
     ce8:	71 81       	ldd	r23, Z+1	; 0x01
     cea:	82 81       	ldd	r24, Z+2	; 0x02
     cec:	93 81       	ldd	r25, Z+3	; 0x03
     cee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cf2:	dc 01       	movw	r26, r24
     cf4:	cb 01       	movw	r24, r22
     cf6:	f8 01       	movw	r30, r16
     cf8:	91 83       	std	Z+1, r25	; 0x01
     cfa:	80 83       	st	Z, r24
     cfc:	de 01       	movw	r26, r28
     cfe:	ad 59       	subi	r26, 0x9D	; 157
     d00:	bf 4f       	sbci	r27, 0xFF	; 255
     d02:	fe 01       	movw	r30, r28
     d04:	e9 59       	subi	r30, 0x99	; 153
     d06:	ff 4f       	sbci	r31, 0xFF	; 255
     d08:	80 81       	ld	r24, Z
     d0a:	91 81       	ldd	r25, Z+1	; 0x01
     d0c:	11 96       	adiw	r26, 0x01	; 1
     d0e:	9c 93       	st	X, r25
     d10:	8e 93       	st	-X, r24
     d12:	fe 01       	movw	r30, r28
     d14:	ed 59       	subi	r30, 0x9D	; 157
     d16:	ff 4f       	sbci	r31, 0xFF	; 255
     d18:	80 81       	ld	r24, Z
     d1a:	91 81       	ldd	r25, Z+1	; 0x01
     d1c:	01 97       	sbiw	r24, 0x01	; 1
     d1e:	f1 f7       	brne	.-4      	; 0xd1c <start+0x1d6>
     d20:	fe 01       	movw	r30, r28
     d22:	ed 59       	subi	r30, 0x9D	; 157
     d24:	ff 4f       	sbci	r31, 0xFF	; 255
     d26:	91 83       	std	Z+1, r25	; 0x01
     d28:	80 83       	st	Z, r24
	UART_init(&uartConfig);


	uint8 password[5] , confirmPassword[5] , passwordVerified , command;

	while(passwordVerified == 0)
     d2a:	fe 01       	movw	r30, r28
     d2c:	ee 58       	subi	r30, 0x8E	; 142
     d2e:	ff 4f       	sbci	r31, 0xFF	; 255
     d30:	80 81       	ld	r24, Z
     d32:	88 23       	and	r24, r24
     d34:	09 f4       	brne	.+2      	; 0xd38 <start+0x1f2>
     d36:	28 cf       	rjmp	.-432    	; 0xb88 <start+0x42>

		_delay_ms(50);
	}


	Password_Store_EEPROM(password);
     d38:	ce 01       	movw	r24, r28
     d3a:	8d 58       	subi	r24, 0x8D	; 141
     d3c:	9f 4f       	sbci	r25, 0xFF	; 255
     d3e:	0e 94 42 0c 	call	0x1884	; 0x1884 <Password_Store_EEPROM>


	while(1)
	{
		uint8 passwordEEPROM[4];
		Password_Read_EEPROM(passwordEEPROM);
     d42:	ce 01       	movw	r24, r28
     d44:	83 58       	subi	r24, 0x83	; 131
     d46:	9f 4f       	sbci	r25, 0xFF	; 255
     d48:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <Password_Read_EEPROM>
		command = UART_recieveByte();
     d4c:	0e 94 0e 14 	call	0x281c	; 0x281c <UART_recieveByte>
     d50:	fe 01       	movw	r30, r28
     d52:	ef 58       	subi	r30, 0x8F	; 143
     d54:	ff 4f       	sbci	r31, 0xFF	; 255
     d56:	80 83       	st	Z, r24
     d58:	fe 01       	movw	r30, r28
     d5a:	e1 5a       	subi	r30, 0xA1	; 161
     d5c:	ff 4f       	sbci	r31, 0xFF	; 255
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	aa e7       	ldi	r26, 0x7A	; 122
     d64:	b4 e4       	ldi	r27, 0x44	; 68
     d66:	80 83       	st	Z, r24
     d68:	91 83       	std	Z+1, r25	; 0x01
     d6a:	a2 83       	std	Z+2, r26	; 0x02
     d6c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d6e:	8e 01       	movw	r16, r28
     d70:	05 5a       	subi	r16, 0xA5	; 165
     d72:	1f 4f       	sbci	r17, 0xFF	; 255
     d74:	fe 01       	movw	r30, r28
     d76:	e1 5a       	subi	r30, 0xA1	; 161
     d78:	ff 4f       	sbci	r31, 0xFF	; 255
     d7a:	60 81       	ld	r22, Z
     d7c:	71 81       	ldd	r23, Z+1	; 0x01
     d7e:	82 81       	ldd	r24, Z+2	; 0x02
     d80:	93 81       	ldd	r25, Z+3	; 0x03
     d82:	20 e0       	ldi	r18, 0x00	; 0
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	4a ef       	ldi	r20, 0xFA	; 250
     d88:	54 e4       	ldi	r21, 0x44	; 68
     d8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d8e:	dc 01       	movw	r26, r24
     d90:	cb 01       	movw	r24, r22
     d92:	f8 01       	movw	r30, r16
     d94:	80 83       	st	Z, r24
     d96:	91 83       	std	Z+1, r25	; 0x01
     d98:	a2 83       	std	Z+2, r26	; 0x02
     d9a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d9c:	fe 01       	movw	r30, r28
     d9e:	e5 5a       	subi	r30, 0xA5	; 165
     da0:	ff 4f       	sbci	r31, 0xFF	; 255
     da2:	60 81       	ld	r22, Z
     da4:	71 81       	ldd	r23, Z+1	; 0x01
     da6:	82 81       	ldd	r24, Z+2	; 0x02
     da8:	93 81       	ldd	r25, Z+3	; 0x03
     daa:	20 e0       	ldi	r18, 0x00	; 0
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	40 e8       	ldi	r20, 0x80	; 128
     db0:	5f e3       	ldi	r21, 0x3F	; 63
     db2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     db6:	88 23       	and	r24, r24
     db8:	44 f4       	brge	.+16     	; 0xdca <start+0x284>
		__ticks = 1;
     dba:	fe 01       	movw	r30, r28
     dbc:	e7 5a       	subi	r30, 0xA7	; 167
     dbe:	ff 4f       	sbci	r31, 0xFF	; 255
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	91 83       	std	Z+1, r25	; 0x01
     dc6:	80 83       	st	Z, r24
     dc8:	64 c0       	rjmp	.+200    	; 0xe92 <start+0x34c>
	else if (__tmp > 65535)
     dca:	fe 01       	movw	r30, r28
     dcc:	e5 5a       	subi	r30, 0xA5	; 165
     dce:	ff 4f       	sbci	r31, 0xFF	; 255
     dd0:	60 81       	ld	r22, Z
     dd2:	71 81       	ldd	r23, Z+1	; 0x01
     dd4:	82 81       	ldd	r24, Z+2	; 0x02
     dd6:	93 81       	ldd	r25, Z+3	; 0x03
     dd8:	20 e0       	ldi	r18, 0x00	; 0
     dda:	3f ef       	ldi	r19, 0xFF	; 255
     ddc:	4f e7       	ldi	r20, 0x7F	; 127
     dde:	57 e4       	ldi	r21, 0x47	; 71
     de0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     de4:	18 16       	cp	r1, r24
     de6:	0c f0       	brlt	.+2      	; 0xdea <start+0x2a4>
     de8:	43 c0       	rjmp	.+134    	; 0xe70 <start+0x32a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dea:	fe 01       	movw	r30, r28
     dec:	e1 5a       	subi	r30, 0xA1	; 161
     dee:	ff 4f       	sbci	r31, 0xFF	; 255
     df0:	60 81       	ld	r22, Z
     df2:	71 81       	ldd	r23, Z+1	; 0x01
     df4:	82 81       	ldd	r24, Z+2	; 0x02
     df6:	93 81       	ldd	r25, Z+3	; 0x03
     df8:	20 e0       	ldi	r18, 0x00	; 0
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	40 e2       	ldi	r20, 0x20	; 32
     dfe:	51 e4       	ldi	r21, 0x41	; 65
     e00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e04:	dc 01       	movw	r26, r24
     e06:	cb 01       	movw	r24, r22
     e08:	8e 01       	movw	r16, r28
     e0a:	07 5a       	subi	r16, 0xA7	; 167
     e0c:	1f 4f       	sbci	r17, 0xFF	; 255
     e0e:	bc 01       	movw	r22, r24
     e10:	cd 01       	movw	r24, r26
     e12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e16:	dc 01       	movw	r26, r24
     e18:	cb 01       	movw	r24, r22
     e1a:	f8 01       	movw	r30, r16
     e1c:	91 83       	std	Z+1, r25	; 0x01
     e1e:	80 83       	st	Z, r24
     e20:	1f c0       	rjmp	.+62     	; 0xe60 <start+0x31a>
     e22:	fe 01       	movw	r30, r28
     e24:	e9 5a       	subi	r30, 0xA9	; 169
     e26:	ff 4f       	sbci	r31, 0xFF	; 255
     e28:	88 ec       	ldi	r24, 0xC8	; 200
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	91 83       	std	Z+1, r25	; 0x01
     e2e:	80 83       	st	Z, r24
     e30:	fe 01       	movw	r30, r28
     e32:	e9 5a       	subi	r30, 0xA9	; 169
     e34:	ff 4f       	sbci	r31, 0xFF	; 255
     e36:	80 81       	ld	r24, Z
     e38:	91 81       	ldd	r25, Z+1	; 0x01
     e3a:	01 97       	sbiw	r24, 0x01	; 1
     e3c:	f1 f7       	brne	.-4      	; 0xe3a <start+0x2f4>
     e3e:	fe 01       	movw	r30, r28
     e40:	e9 5a       	subi	r30, 0xA9	; 169
     e42:	ff 4f       	sbci	r31, 0xFF	; 255
     e44:	91 83       	std	Z+1, r25	; 0x01
     e46:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e48:	de 01       	movw	r26, r28
     e4a:	a7 5a       	subi	r26, 0xA7	; 167
     e4c:	bf 4f       	sbci	r27, 0xFF	; 255
     e4e:	fe 01       	movw	r30, r28
     e50:	e7 5a       	subi	r30, 0xA7	; 167
     e52:	ff 4f       	sbci	r31, 0xFF	; 255
     e54:	80 81       	ld	r24, Z
     e56:	91 81       	ldd	r25, Z+1	; 0x01
     e58:	01 97       	sbiw	r24, 0x01	; 1
     e5a:	11 96       	adiw	r26, 0x01	; 1
     e5c:	9c 93       	st	X, r25
     e5e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e60:	fe 01       	movw	r30, r28
     e62:	e7 5a       	subi	r30, 0xA7	; 167
     e64:	ff 4f       	sbci	r31, 0xFF	; 255
     e66:	80 81       	ld	r24, Z
     e68:	91 81       	ldd	r25, Z+1	; 0x01
     e6a:	00 97       	sbiw	r24, 0x00	; 0
     e6c:	d1 f6       	brne	.-76     	; 0xe22 <start+0x2dc>
     e6e:	28 c0       	rjmp	.+80     	; 0xec0 <start+0x37a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e70:	8e 01       	movw	r16, r28
     e72:	07 5a       	subi	r16, 0xA7	; 167
     e74:	1f 4f       	sbci	r17, 0xFF	; 255
     e76:	fe 01       	movw	r30, r28
     e78:	e5 5a       	subi	r30, 0xA5	; 165
     e7a:	ff 4f       	sbci	r31, 0xFF	; 255
     e7c:	60 81       	ld	r22, Z
     e7e:	71 81       	ldd	r23, Z+1	; 0x01
     e80:	82 81       	ldd	r24, Z+2	; 0x02
     e82:	93 81       	ldd	r25, Z+3	; 0x03
     e84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e88:	dc 01       	movw	r26, r24
     e8a:	cb 01       	movw	r24, r22
     e8c:	f8 01       	movw	r30, r16
     e8e:	91 83       	std	Z+1, r25	; 0x01
     e90:	80 83       	st	Z, r24
     e92:	de 01       	movw	r26, r28
     e94:	ab 5a       	subi	r26, 0xAB	; 171
     e96:	bf 4f       	sbci	r27, 0xFF	; 255
     e98:	fe 01       	movw	r30, r28
     e9a:	e7 5a       	subi	r30, 0xA7	; 167
     e9c:	ff 4f       	sbci	r31, 0xFF	; 255
     e9e:	80 81       	ld	r24, Z
     ea0:	91 81       	ldd	r25, Z+1	; 0x01
     ea2:	11 96       	adiw	r26, 0x01	; 1
     ea4:	9c 93       	st	X, r25
     ea6:	8e 93       	st	-X, r24
     ea8:	fe 01       	movw	r30, r28
     eaa:	eb 5a       	subi	r30, 0xAB	; 171
     eac:	ff 4f       	sbci	r31, 0xFF	; 255
     eae:	80 81       	ld	r24, Z
     eb0:	91 81       	ldd	r25, Z+1	; 0x01
     eb2:	01 97       	sbiw	r24, 0x01	; 1
     eb4:	f1 f7       	brne	.-4      	; 0xeb2 <start+0x36c>
     eb6:	fe 01       	movw	r30, r28
     eb8:	eb 5a       	subi	r30, 0xAB	; 171
     eba:	ff 4f       	sbci	r31, 0xFF	; 255
     ebc:	91 83       	std	Z+1, r25	; 0x01
     ebe:	80 83       	st	Z, r24
		_delay_ms(1000);

		if(command == '+')
     ec0:	fe 01       	movw	r30, r28
     ec2:	ef 58       	subi	r30, 0x8F	; 143
     ec4:	ff 4f       	sbci	r31, 0xFF	; 255
     ec6:	80 81       	ld	r24, Z
     ec8:	8b 32       	cpi	r24, 0x2B	; 43
     eca:	09 f0       	breq	.+2      	; 0xece <start+0x388>
     ecc:	da c1       	rjmp	.+948    	; 0x1282 <start+0x73c>
		{
			Password_Rec(password);
     ece:	ce 01       	movw	r24, r28
     ed0:	8d 58       	subi	r24, 0x8D	; 141
     ed2:	9f 4f       	sbci	r25, 0xFF	; 255
     ed4:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <Password_Rec>

			if(Password_Ver(password, passwordEEPROM))
     ed8:	ce 01       	movw	r24, r28
     eda:	8d 58       	subi	r24, 0x8D	; 141
     edc:	9f 4f       	sbci	r25, 0xFF	; 255
     ede:	9e 01       	movw	r18, r28
     ee0:	23 58       	subi	r18, 0x83	; 131
     ee2:	3f 4f       	sbci	r19, 0xFF	; 255
     ee4:	b9 01       	movw	r22, r18
     ee6:	0e 94 9c 0b 	call	0x1738	; 0x1738 <Password_Ver>
     eea:	88 23       	and	r24, r24
     eec:	09 f4       	brne	.+2      	; 0xef0 <start+0x3aa>
     eee:	bd c0       	rjmp	.+378    	; 0x106a <start+0x524>
			{
				falsePasswords = 0;
     ef0:	10 92 77 00 	sts	0x0077, r1
     ef4:	10 92 76 00 	sts	0x0076, r1
				UART_sendByte(1);
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	0e 94 f7 13 	call	0x27ee	; 0x27ee <UART_sendByte>
     efe:	fe 01       	movw	r30, r28
     f00:	ef 5a       	subi	r30, 0xAF	; 175
     f02:	ff 4f       	sbci	r31, 0xFF	; 255
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	a8 e4       	ldi	r26, 0x48	; 72
     f0a:	b2 e4       	ldi	r27, 0x42	; 66
     f0c:	80 83       	st	Z, r24
     f0e:	91 83       	std	Z+1, r25	; 0x01
     f10:	a2 83       	std	Z+2, r26	; 0x02
     f12:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f14:	8e 01       	movw	r16, r28
     f16:	03 5b       	subi	r16, 0xB3	; 179
     f18:	1f 4f       	sbci	r17, 0xFF	; 255
     f1a:	fe 01       	movw	r30, r28
     f1c:	ef 5a       	subi	r30, 0xAF	; 175
     f1e:	ff 4f       	sbci	r31, 0xFF	; 255
     f20:	60 81       	ld	r22, Z
     f22:	71 81       	ldd	r23, Z+1	; 0x01
     f24:	82 81       	ldd	r24, Z+2	; 0x02
     f26:	93 81       	ldd	r25, Z+3	; 0x03
     f28:	20 e0       	ldi	r18, 0x00	; 0
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	4a ef       	ldi	r20, 0xFA	; 250
     f2e:	54 e4       	ldi	r21, 0x44	; 68
     f30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f34:	dc 01       	movw	r26, r24
     f36:	cb 01       	movw	r24, r22
     f38:	f8 01       	movw	r30, r16
     f3a:	80 83       	st	Z, r24
     f3c:	91 83       	std	Z+1, r25	; 0x01
     f3e:	a2 83       	std	Z+2, r26	; 0x02
     f40:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f42:	fe 01       	movw	r30, r28
     f44:	e3 5b       	subi	r30, 0xB3	; 179
     f46:	ff 4f       	sbci	r31, 0xFF	; 255
     f48:	60 81       	ld	r22, Z
     f4a:	71 81       	ldd	r23, Z+1	; 0x01
     f4c:	82 81       	ldd	r24, Z+2	; 0x02
     f4e:	93 81       	ldd	r25, Z+3	; 0x03
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	40 e8       	ldi	r20, 0x80	; 128
     f56:	5f e3       	ldi	r21, 0x3F	; 63
     f58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f5c:	88 23       	and	r24, r24
     f5e:	44 f4       	brge	.+16     	; 0xf70 <start+0x42a>
		__ticks = 1;
     f60:	fe 01       	movw	r30, r28
     f62:	e5 5b       	subi	r30, 0xB5	; 181
     f64:	ff 4f       	sbci	r31, 0xFF	; 255
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	91 83       	std	Z+1, r25	; 0x01
     f6c:	80 83       	st	Z, r24
     f6e:	64 c0       	rjmp	.+200    	; 0x1038 <start+0x4f2>
	else if (__tmp > 65535)
     f70:	fe 01       	movw	r30, r28
     f72:	e3 5b       	subi	r30, 0xB3	; 179
     f74:	ff 4f       	sbci	r31, 0xFF	; 255
     f76:	60 81       	ld	r22, Z
     f78:	71 81       	ldd	r23, Z+1	; 0x01
     f7a:	82 81       	ldd	r24, Z+2	; 0x02
     f7c:	93 81       	ldd	r25, Z+3	; 0x03
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	3f ef       	ldi	r19, 0xFF	; 255
     f82:	4f e7       	ldi	r20, 0x7F	; 127
     f84:	57 e4       	ldi	r21, 0x47	; 71
     f86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f8a:	18 16       	cp	r1, r24
     f8c:	0c f0       	brlt	.+2      	; 0xf90 <start+0x44a>
     f8e:	43 c0       	rjmp	.+134    	; 0x1016 <start+0x4d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f90:	fe 01       	movw	r30, r28
     f92:	ef 5a       	subi	r30, 0xAF	; 175
     f94:	ff 4f       	sbci	r31, 0xFF	; 255
     f96:	60 81       	ld	r22, Z
     f98:	71 81       	ldd	r23, Z+1	; 0x01
     f9a:	82 81       	ldd	r24, Z+2	; 0x02
     f9c:	93 81       	ldd	r25, Z+3	; 0x03
     f9e:	20 e0       	ldi	r18, 0x00	; 0
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	40 e2       	ldi	r20, 0x20	; 32
     fa4:	51 e4       	ldi	r21, 0x41	; 65
     fa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     faa:	dc 01       	movw	r26, r24
     fac:	cb 01       	movw	r24, r22
     fae:	8e 01       	movw	r16, r28
     fb0:	05 5b       	subi	r16, 0xB5	; 181
     fb2:	1f 4f       	sbci	r17, 0xFF	; 255
     fb4:	bc 01       	movw	r22, r24
     fb6:	cd 01       	movw	r24, r26
     fb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fbc:	dc 01       	movw	r26, r24
     fbe:	cb 01       	movw	r24, r22
     fc0:	f8 01       	movw	r30, r16
     fc2:	91 83       	std	Z+1, r25	; 0x01
     fc4:	80 83       	st	Z, r24
     fc6:	1f c0       	rjmp	.+62     	; 0x1006 <start+0x4c0>
     fc8:	fe 01       	movw	r30, r28
     fca:	e7 5b       	subi	r30, 0xB7	; 183
     fcc:	ff 4f       	sbci	r31, 0xFF	; 255
     fce:	88 ec       	ldi	r24, 0xC8	; 200
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	91 83       	std	Z+1, r25	; 0x01
     fd4:	80 83       	st	Z, r24
     fd6:	fe 01       	movw	r30, r28
     fd8:	e7 5b       	subi	r30, 0xB7	; 183
     fda:	ff 4f       	sbci	r31, 0xFF	; 255
     fdc:	80 81       	ld	r24, Z
     fde:	91 81       	ldd	r25, Z+1	; 0x01
     fe0:	01 97       	sbiw	r24, 0x01	; 1
     fe2:	f1 f7       	brne	.-4      	; 0xfe0 <start+0x49a>
     fe4:	fe 01       	movw	r30, r28
     fe6:	e7 5b       	subi	r30, 0xB7	; 183
     fe8:	ff 4f       	sbci	r31, 0xFF	; 255
     fea:	91 83       	std	Z+1, r25	; 0x01
     fec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fee:	de 01       	movw	r26, r28
     ff0:	a5 5b       	subi	r26, 0xB5	; 181
     ff2:	bf 4f       	sbci	r27, 0xFF	; 255
     ff4:	fe 01       	movw	r30, r28
     ff6:	e5 5b       	subi	r30, 0xB5	; 181
     ff8:	ff 4f       	sbci	r31, 0xFF	; 255
     ffa:	80 81       	ld	r24, Z
     ffc:	91 81       	ldd	r25, Z+1	; 0x01
     ffe:	01 97       	sbiw	r24, 0x01	; 1
    1000:	11 96       	adiw	r26, 0x01	; 1
    1002:	9c 93       	st	X, r25
    1004:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1006:	fe 01       	movw	r30, r28
    1008:	e5 5b       	subi	r30, 0xB5	; 181
    100a:	ff 4f       	sbci	r31, 0xFF	; 255
    100c:	80 81       	ld	r24, Z
    100e:	91 81       	ldd	r25, Z+1	; 0x01
    1010:	00 97       	sbiw	r24, 0x00	; 0
    1012:	d1 f6       	brne	.-76     	; 0xfc8 <start+0x482>
    1014:	27 c0       	rjmp	.+78     	; 0x1064 <start+0x51e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1016:	8e 01       	movw	r16, r28
    1018:	05 5b       	subi	r16, 0xB5	; 181
    101a:	1f 4f       	sbci	r17, 0xFF	; 255
    101c:	fe 01       	movw	r30, r28
    101e:	e3 5b       	subi	r30, 0xB3	; 179
    1020:	ff 4f       	sbci	r31, 0xFF	; 255
    1022:	60 81       	ld	r22, Z
    1024:	71 81       	ldd	r23, Z+1	; 0x01
    1026:	82 81       	ldd	r24, Z+2	; 0x02
    1028:	93 81       	ldd	r25, Z+3	; 0x03
    102a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    102e:	dc 01       	movw	r26, r24
    1030:	cb 01       	movw	r24, r22
    1032:	f8 01       	movw	r30, r16
    1034:	91 83       	std	Z+1, r25	; 0x01
    1036:	80 83       	st	Z, r24
    1038:	de 01       	movw	r26, r28
    103a:	a9 5b       	subi	r26, 0xB9	; 185
    103c:	bf 4f       	sbci	r27, 0xFF	; 255
    103e:	fe 01       	movw	r30, r28
    1040:	e5 5b       	subi	r30, 0xB5	; 181
    1042:	ff 4f       	sbci	r31, 0xFF	; 255
    1044:	80 81       	ld	r24, Z
    1046:	91 81       	ldd	r25, Z+1	; 0x01
    1048:	8d 93       	st	X+, r24
    104a:	9c 93       	st	X, r25
    104c:	fe 01       	movw	r30, r28
    104e:	e9 5b       	subi	r30, 0xB9	; 185
    1050:	ff 4f       	sbci	r31, 0xFF	; 255
    1052:	80 81       	ld	r24, Z
    1054:	91 81       	ldd	r25, Z+1	; 0x01
    1056:	01 97       	sbiw	r24, 0x01	; 1
    1058:	f1 f7       	brne	.-4      	; 0x1056 <start+0x510>
    105a:	fe 01       	movw	r30, r28
    105c:	e9 5b       	subi	r30, 0xB9	; 185
    105e:	ff 4f       	sbci	r31, 0xFF	; 255
    1060:	91 83       	std	Z+1, r25	; 0x01
    1062:	80 83       	st	Z, r24
				_delay_ms(50);
				openDoor();
    1064:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <openDoor>
    1068:	6c ce       	rjmp	.-808    	; 0xd42 <start+0x1fc>
			}

			else
			{
				UART_sendByte(0);
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	0e 94 f7 13 	call	0x27ee	; 0x27ee <UART_sendByte>
    1070:	fe 01       	movw	r30, r28
    1072:	ed 5b       	subi	r30, 0xBD	; 189
    1074:	ff 4f       	sbci	r31, 0xFF	; 255
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	a8 e4       	ldi	r26, 0x48	; 72
    107c:	b2 e4       	ldi	r27, 0x42	; 66
    107e:	80 83       	st	Z, r24
    1080:	91 83       	std	Z+1, r25	; 0x01
    1082:	a2 83       	std	Z+2, r26	; 0x02
    1084:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1086:	8e 01       	movw	r16, r28
    1088:	01 5c       	subi	r16, 0xC1	; 193
    108a:	1f 4f       	sbci	r17, 0xFF	; 255
    108c:	fe 01       	movw	r30, r28
    108e:	ed 5b       	subi	r30, 0xBD	; 189
    1090:	ff 4f       	sbci	r31, 0xFF	; 255
    1092:	60 81       	ld	r22, Z
    1094:	71 81       	ldd	r23, Z+1	; 0x01
    1096:	82 81       	ldd	r24, Z+2	; 0x02
    1098:	93 81       	ldd	r25, Z+3	; 0x03
    109a:	20 e0       	ldi	r18, 0x00	; 0
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	4a ef       	ldi	r20, 0xFA	; 250
    10a0:	54 e4       	ldi	r21, 0x44	; 68
    10a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10a6:	dc 01       	movw	r26, r24
    10a8:	cb 01       	movw	r24, r22
    10aa:	f8 01       	movw	r30, r16
    10ac:	80 83       	st	Z, r24
    10ae:	91 83       	std	Z+1, r25	; 0x01
    10b0:	a2 83       	std	Z+2, r26	; 0x02
    10b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    10b4:	fe 01       	movw	r30, r28
    10b6:	ff 96       	adiw	r30, 0x3f	; 63
    10b8:	60 81       	ld	r22, Z
    10ba:	71 81       	ldd	r23, Z+1	; 0x01
    10bc:	82 81       	ldd	r24, Z+2	; 0x02
    10be:	93 81       	ldd	r25, Z+3	; 0x03
    10c0:	20 e0       	ldi	r18, 0x00	; 0
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	40 e8       	ldi	r20, 0x80	; 128
    10c6:	5f e3       	ldi	r21, 0x3F	; 63
    10c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10cc:	88 23       	and	r24, r24
    10ce:	2c f4       	brge	.+10     	; 0x10da <start+0x594>
		__ticks = 1;
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	9e af       	std	Y+62, r25	; 0x3e
    10d6:	8d af       	std	Y+61, r24	; 0x3d
    10d8:	46 c0       	rjmp	.+140    	; 0x1166 <start+0x620>
	else if (__tmp > 65535)
    10da:	fe 01       	movw	r30, r28
    10dc:	ff 96       	adiw	r30, 0x3f	; 63
    10de:	60 81       	ld	r22, Z
    10e0:	71 81       	ldd	r23, Z+1	; 0x01
    10e2:	82 81       	ldd	r24, Z+2	; 0x02
    10e4:	93 81       	ldd	r25, Z+3	; 0x03
    10e6:	20 e0       	ldi	r18, 0x00	; 0
    10e8:	3f ef       	ldi	r19, 0xFF	; 255
    10ea:	4f e7       	ldi	r20, 0x7F	; 127
    10ec:	57 e4       	ldi	r21, 0x47	; 71
    10ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10f2:	18 16       	cp	r1, r24
    10f4:	64 f5       	brge	.+88     	; 0x114e <start+0x608>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10f6:	fe 01       	movw	r30, r28
    10f8:	ed 5b       	subi	r30, 0xBD	; 189
    10fa:	ff 4f       	sbci	r31, 0xFF	; 255
    10fc:	60 81       	ld	r22, Z
    10fe:	71 81       	ldd	r23, Z+1	; 0x01
    1100:	82 81       	ldd	r24, Z+2	; 0x02
    1102:	93 81       	ldd	r25, Z+3	; 0x03
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	40 e2       	ldi	r20, 0x20	; 32
    110a:	51 e4       	ldi	r21, 0x41	; 65
    110c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1110:	dc 01       	movw	r26, r24
    1112:	cb 01       	movw	r24, r22
    1114:	bc 01       	movw	r22, r24
    1116:	cd 01       	movw	r24, r26
    1118:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    111c:	dc 01       	movw	r26, r24
    111e:	cb 01       	movw	r24, r22
    1120:	9e af       	std	Y+62, r25	; 0x3e
    1122:	8d af       	std	Y+61, r24	; 0x3d
    1124:	0f c0       	rjmp	.+30     	; 0x1144 <start+0x5fe>
    1126:	88 ec       	ldi	r24, 0xC8	; 200
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	9c af       	std	Y+60, r25	; 0x3c
    112c:	8b af       	std	Y+59, r24	; 0x3b
    112e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1130:	9c ad       	ldd	r25, Y+60	; 0x3c
    1132:	01 97       	sbiw	r24, 0x01	; 1
    1134:	f1 f7       	brne	.-4      	; 0x1132 <start+0x5ec>
    1136:	9c af       	std	Y+60, r25	; 0x3c
    1138:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    113a:	8d ad       	ldd	r24, Y+61	; 0x3d
    113c:	9e ad       	ldd	r25, Y+62	; 0x3e
    113e:	01 97       	sbiw	r24, 0x01	; 1
    1140:	9e af       	std	Y+62, r25	; 0x3e
    1142:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1144:	8d ad       	ldd	r24, Y+61	; 0x3d
    1146:	9e ad       	ldd	r25, Y+62	; 0x3e
    1148:	00 97       	sbiw	r24, 0x00	; 0
    114a:	69 f7       	brne	.-38     	; 0x1126 <start+0x5e0>
    114c:	16 c0       	rjmp	.+44     	; 0x117a <start+0x634>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    114e:	fe 01       	movw	r30, r28
    1150:	ff 96       	adiw	r30, 0x3f	; 63
    1152:	60 81       	ld	r22, Z
    1154:	71 81       	ldd	r23, Z+1	; 0x01
    1156:	82 81       	ldd	r24, Z+2	; 0x02
    1158:	93 81       	ldd	r25, Z+3	; 0x03
    115a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    115e:	dc 01       	movw	r26, r24
    1160:	cb 01       	movw	r24, r22
    1162:	9e af       	std	Y+62, r25	; 0x3e
    1164:	8d af       	std	Y+61, r24	; 0x3d
    1166:	8d ad       	ldd	r24, Y+61	; 0x3d
    1168:	9e ad       	ldd	r25, Y+62	; 0x3e
    116a:	9a af       	std	Y+58, r25	; 0x3a
    116c:	89 af       	std	Y+57, r24	; 0x39
    116e:	89 ad       	ldd	r24, Y+57	; 0x39
    1170:	9a ad       	ldd	r25, Y+58	; 0x3a
    1172:	01 97       	sbiw	r24, 0x01	; 1
    1174:	f1 f7       	brne	.-4      	; 0x1172 <start+0x62c>
    1176:	9a af       	std	Y+58, r25	; 0x3a
    1178:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(50);
				falsePasswords++;
    117a:	80 91 76 00 	lds	r24, 0x0076
    117e:	90 91 77 00 	lds	r25, 0x0077
    1182:	01 96       	adiw	r24, 0x01	; 1
    1184:	90 93 77 00 	sts	0x0077, r25
    1188:	80 93 76 00 	sts	0x0076, r24
				UART_sendByte(falsePasswords);
    118c:	80 91 76 00 	lds	r24, 0x0076
    1190:	90 91 77 00 	lds	r25, 0x0077
    1194:	0e 94 f7 13 	call	0x27ee	; 0x27ee <UART_sendByte>
    1198:	80 e0       	ldi	r24, 0x00	; 0
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	a8 e4       	ldi	r26, 0x48	; 72
    119e:	b2 e4       	ldi	r27, 0x42	; 66
    11a0:	8d ab       	std	Y+53, r24	; 0x35
    11a2:	9e ab       	std	Y+54, r25	; 0x36
    11a4:	af ab       	std	Y+55, r26	; 0x37
    11a6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11a8:	6d a9       	ldd	r22, Y+53	; 0x35
    11aa:	7e a9       	ldd	r23, Y+54	; 0x36
    11ac:	8f a9       	ldd	r24, Y+55	; 0x37
    11ae:	98 ad       	ldd	r25, Y+56	; 0x38
    11b0:	20 e0       	ldi	r18, 0x00	; 0
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	4a ef       	ldi	r20, 0xFA	; 250
    11b6:	54 e4       	ldi	r21, 0x44	; 68
    11b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11bc:	dc 01       	movw	r26, r24
    11be:	cb 01       	movw	r24, r22
    11c0:	89 ab       	std	Y+49, r24	; 0x31
    11c2:	9a ab       	std	Y+50, r25	; 0x32
    11c4:	ab ab       	std	Y+51, r26	; 0x33
    11c6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    11c8:	69 a9       	ldd	r22, Y+49	; 0x31
    11ca:	7a a9       	ldd	r23, Y+50	; 0x32
    11cc:	8b a9       	ldd	r24, Y+51	; 0x33
    11ce:	9c a9       	ldd	r25, Y+52	; 0x34
    11d0:	20 e0       	ldi	r18, 0x00	; 0
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	40 e8       	ldi	r20, 0x80	; 128
    11d6:	5f e3       	ldi	r21, 0x3F	; 63
    11d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11dc:	88 23       	and	r24, r24
    11de:	2c f4       	brge	.+10     	; 0x11ea <start+0x6a4>
		__ticks = 1;
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	98 ab       	std	Y+48, r25	; 0x30
    11e6:	8f a7       	std	Y+47, r24	; 0x2f
    11e8:	3f c0       	rjmp	.+126    	; 0x1268 <start+0x722>
	else if (__tmp > 65535)
    11ea:	69 a9       	ldd	r22, Y+49	; 0x31
    11ec:	7a a9       	ldd	r23, Y+50	; 0x32
    11ee:	8b a9       	ldd	r24, Y+51	; 0x33
    11f0:	9c a9       	ldd	r25, Y+52	; 0x34
    11f2:	20 e0       	ldi	r18, 0x00	; 0
    11f4:	3f ef       	ldi	r19, 0xFF	; 255
    11f6:	4f e7       	ldi	r20, 0x7F	; 127
    11f8:	57 e4       	ldi	r21, 0x47	; 71
    11fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11fe:	18 16       	cp	r1, r24
    1200:	4c f5       	brge	.+82     	; 0x1254 <start+0x70e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1202:	6d a9       	ldd	r22, Y+53	; 0x35
    1204:	7e a9       	ldd	r23, Y+54	; 0x36
    1206:	8f a9       	ldd	r24, Y+55	; 0x37
    1208:	98 ad       	ldd	r25, Y+56	; 0x38
    120a:	20 e0       	ldi	r18, 0x00	; 0
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	40 e2       	ldi	r20, 0x20	; 32
    1210:	51 e4       	ldi	r21, 0x41	; 65
    1212:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1216:	dc 01       	movw	r26, r24
    1218:	cb 01       	movw	r24, r22
    121a:	bc 01       	movw	r22, r24
    121c:	cd 01       	movw	r24, r26
    121e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1222:	dc 01       	movw	r26, r24
    1224:	cb 01       	movw	r24, r22
    1226:	98 ab       	std	Y+48, r25	; 0x30
    1228:	8f a7       	std	Y+47, r24	; 0x2f
    122a:	0f c0       	rjmp	.+30     	; 0x124a <start+0x704>
    122c:	88 ec       	ldi	r24, 0xC8	; 200
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	9e a7       	std	Y+46, r25	; 0x2e
    1232:	8d a7       	std	Y+45, r24	; 0x2d
    1234:	8d a5       	ldd	r24, Y+45	; 0x2d
    1236:	9e a5       	ldd	r25, Y+46	; 0x2e
    1238:	01 97       	sbiw	r24, 0x01	; 1
    123a:	f1 f7       	brne	.-4      	; 0x1238 <start+0x6f2>
    123c:	9e a7       	std	Y+46, r25	; 0x2e
    123e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1240:	8f a5       	ldd	r24, Y+47	; 0x2f
    1242:	98 a9       	ldd	r25, Y+48	; 0x30
    1244:	01 97       	sbiw	r24, 0x01	; 1
    1246:	98 ab       	std	Y+48, r25	; 0x30
    1248:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    124a:	8f a5       	ldd	r24, Y+47	; 0x2f
    124c:	98 a9       	ldd	r25, Y+48	; 0x30
    124e:	00 97       	sbiw	r24, 0x00	; 0
    1250:	69 f7       	brne	.-38     	; 0x122c <start+0x6e6>
    1252:	14 c0       	rjmp	.+40     	; 0x127c <start+0x736>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1254:	69 a9       	ldd	r22, Y+49	; 0x31
    1256:	7a a9       	ldd	r23, Y+50	; 0x32
    1258:	8b a9       	ldd	r24, Y+51	; 0x33
    125a:	9c a9       	ldd	r25, Y+52	; 0x34
    125c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1260:	dc 01       	movw	r26, r24
    1262:	cb 01       	movw	r24, r22
    1264:	98 ab       	std	Y+48, r25	; 0x30
    1266:	8f a7       	std	Y+47, r24	; 0x2f
    1268:	8f a5       	ldd	r24, Y+47	; 0x2f
    126a:	98 a9       	ldd	r25, Y+48	; 0x30
    126c:	9c a7       	std	Y+44, r25	; 0x2c
    126e:	8b a7       	std	Y+43, r24	; 0x2b
    1270:	8b a5       	ldd	r24, Y+43	; 0x2b
    1272:	9c a5       	ldd	r25, Y+44	; 0x2c
    1274:	01 97       	sbiw	r24, 0x01	; 1
    1276:	f1 f7       	brne	.-4      	; 0x1274 <start+0x72e>
    1278:	9c a7       	std	Y+44, r25	; 0x2c
    127a:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(50);
				Password_False();
    127c:	0e 94 1b 0c 	call	0x1836	; 0x1836 <Password_False>
    1280:	60 cd       	rjmp	.-1344   	; 0xd42 <start+0x1fc>

			}
		}

		else if(command == '-')
    1282:	fe 01       	movw	r30, r28
    1284:	ef 58       	subi	r30, 0x8F	; 143
    1286:	ff 4f       	sbci	r31, 0xFF	; 255
    1288:	80 81       	ld	r24, Z
    128a:	8d 32       	cpi	r24, 0x2D	; 45
    128c:	09 f0       	breq	.+2      	; 0x1290 <start+0x74a>
    128e:	59 cd       	rjmp	.-1358   	; 0xd42 <start+0x1fc>
		{
			Password_Rec(password);
    1290:	ce 01       	movw	r24, r28
    1292:	8d 58       	subi	r24, 0x8D	; 141
    1294:	9f 4f       	sbci	r25, 0xFF	; 255
    1296:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <Password_Rec>


			passwordVerified = Password_Ver(password, passwordEEPROM);
    129a:	ce 01       	movw	r24, r28
    129c:	8d 58       	subi	r24, 0x8D	; 141
    129e:	9f 4f       	sbci	r25, 0xFF	; 255
    12a0:	9e 01       	movw	r18, r28
    12a2:	23 58       	subi	r18, 0x83	; 131
    12a4:	3f 4f       	sbci	r19, 0xFF	; 255
    12a6:	b9 01       	movw	r22, r18
    12a8:	0e 94 9c 0b 	call	0x1738	; 0x1738 <Password_Ver>
    12ac:	fe 01       	movw	r30, r28
    12ae:	ee 58       	subi	r30, 0x8E	; 142
    12b0:	ff 4f       	sbci	r31, 0xFF	; 255
    12b2:	80 83       	st	Z, r24
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	a8 e4       	ldi	r26, 0x48	; 72
    12ba:	b2 e4       	ldi	r27, 0x42	; 66
    12bc:	8f a3       	std	Y+39, r24	; 0x27
    12be:	98 a7       	std	Y+40, r25	; 0x28
    12c0:	a9 a7       	std	Y+41, r26	; 0x29
    12c2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12c4:	6f a1       	ldd	r22, Y+39	; 0x27
    12c6:	78 a5       	ldd	r23, Y+40	; 0x28
    12c8:	89 a5       	ldd	r24, Y+41	; 0x29
    12ca:	9a a5       	ldd	r25, Y+42	; 0x2a
    12cc:	20 e0       	ldi	r18, 0x00	; 0
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	4a ef       	ldi	r20, 0xFA	; 250
    12d2:	54 e4       	ldi	r21, 0x44	; 68
    12d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12d8:	dc 01       	movw	r26, r24
    12da:	cb 01       	movw	r24, r22
    12dc:	8b a3       	std	Y+35, r24	; 0x23
    12de:	9c a3       	std	Y+36, r25	; 0x24
    12e0:	ad a3       	std	Y+37, r26	; 0x25
    12e2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12e4:	6b a1       	ldd	r22, Y+35	; 0x23
    12e6:	7c a1       	ldd	r23, Y+36	; 0x24
    12e8:	8d a1       	ldd	r24, Y+37	; 0x25
    12ea:	9e a1       	ldd	r25, Y+38	; 0x26
    12ec:	20 e0       	ldi	r18, 0x00	; 0
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	40 e8       	ldi	r20, 0x80	; 128
    12f2:	5f e3       	ldi	r21, 0x3F	; 63
    12f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12f8:	88 23       	and	r24, r24
    12fa:	2c f4       	brge	.+10     	; 0x1306 <start+0x7c0>
		__ticks = 1;
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	9a a3       	std	Y+34, r25	; 0x22
    1302:	89 a3       	std	Y+33, r24	; 0x21
    1304:	3f c0       	rjmp	.+126    	; 0x1384 <start+0x83e>
	else if (__tmp > 65535)
    1306:	6b a1       	ldd	r22, Y+35	; 0x23
    1308:	7c a1       	ldd	r23, Y+36	; 0x24
    130a:	8d a1       	ldd	r24, Y+37	; 0x25
    130c:	9e a1       	ldd	r25, Y+38	; 0x26
    130e:	20 e0       	ldi	r18, 0x00	; 0
    1310:	3f ef       	ldi	r19, 0xFF	; 255
    1312:	4f e7       	ldi	r20, 0x7F	; 127
    1314:	57 e4       	ldi	r21, 0x47	; 71
    1316:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    131a:	18 16       	cp	r1, r24
    131c:	4c f5       	brge	.+82     	; 0x1370 <start+0x82a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    131e:	6f a1       	ldd	r22, Y+39	; 0x27
    1320:	78 a5       	ldd	r23, Y+40	; 0x28
    1322:	89 a5       	ldd	r24, Y+41	; 0x29
    1324:	9a a5       	ldd	r25, Y+42	; 0x2a
    1326:	20 e0       	ldi	r18, 0x00	; 0
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	40 e2       	ldi	r20, 0x20	; 32
    132c:	51 e4       	ldi	r21, 0x41	; 65
    132e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1332:	dc 01       	movw	r26, r24
    1334:	cb 01       	movw	r24, r22
    1336:	bc 01       	movw	r22, r24
    1338:	cd 01       	movw	r24, r26
    133a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    133e:	dc 01       	movw	r26, r24
    1340:	cb 01       	movw	r24, r22
    1342:	9a a3       	std	Y+34, r25	; 0x22
    1344:	89 a3       	std	Y+33, r24	; 0x21
    1346:	0f c0       	rjmp	.+30     	; 0x1366 <start+0x820>
    1348:	88 ec       	ldi	r24, 0xC8	; 200
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	98 a3       	std	Y+32, r25	; 0x20
    134e:	8f 8f       	std	Y+31, r24	; 0x1f
    1350:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1352:	98 a1       	ldd	r25, Y+32	; 0x20
    1354:	01 97       	sbiw	r24, 0x01	; 1
    1356:	f1 f7       	brne	.-4      	; 0x1354 <start+0x80e>
    1358:	98 a3       	std	Y+32, r25	; 0x20
    135a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    135c:	89 a1       	ldd	r24, Y+33	; 0x21
    135e:	9a a1       	ldd	r25, Y+34	; 0x22
    1360:	01 97       	sbiw	r24, 0x01	; 1
    1362:	9a a3       	std	Y+34, r25	; 0x22
    1364:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1366:	89 a1       	ldd	r24, Y+33	; 0x21
    1368:	9a a1       	ldd	r25, Y+34	; 0x22
    136a:	00 97       	sbiw	r24, 0x00	; 0
    136c:	69 f7       	brne	.-38     	; 0x1348 <start+0x802>
    136e:	14 c0       	rjmp	.+40     	; 0x1398 <start+0x852>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1370:	6b a1       	ldd	r22, Y+35	; 0x23
    1372:	7c a1       	ldd	r23, Y+36	; 0x24
    1374:	8d a1       	ldd	r24, Y+37	; 0x25
    1376:	9e a1       	ldd	r25, Y+38	; 0x26
    1378:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    137c:	dc 01       	movw	r26, r24
    137e:	cb 01       	movw	r24, r22
    1380:	9a a3       	std	Y+34, r25	; 0x22
    1382:	89 a3       	std	Y+33, r24	; 0x21
    1384:	89 a1       	ldd	r24, Y+33	; 0x21
    1386:	9a a1       	ldd	r25, Y+34	; 0x22
    1388:	9e 8f       	std	Y+30, r25	; 0x1e
    138a:	8d 8f       	std	Y+29, r24	; 0x1d
    138c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    138e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1390:	01 97       	sbiw	r24, 0x01	; 1
    1392:	f1 f7       	brne	.-4      	; 0x1390 <start+0x84a>
    1394:	9e 8f       	std	Y+30, r25	; 0x1e
    1396:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(50);
			UART_sendByte(passwordVerified);
    1398:	fe 01       	movw	r30, r28
    139a:	ee 58       	subi	r30, 0x8E	; 142
    139c:	ff 4f       	sbci	r31, 0xFF	; 255
    139e:	80 81       	ld	r24, Z
    13a0:	0e 94 f7 13 	call	0x27ee	; 0x27ee <UART_sendByte>

			if(passwordVerified)
    13a4:	fe 01       	movw	r30, r28
    13a6:	ee 58       	subi	r30, 0x8E	; 142
    13a8:	ff 4f       	sbci	r31, 0xFF	; 255
    13aa:	80 81       	ld	r24, Z
    13ac:	88 23       	and	r24, r24
    13ae:	09 f4       	brne	.+2      	; 0x13b2 <start+0x86c>
    13b0:	a0 c0       	rjmp	.+320    	; 0x14f2 <start+0x9ac>
			{
				falsePasswords = 0;
    13b2:	10 92 77 00 	sts	0x0077, r1
    13b6:	10 92 76 00 	sts	0x0076, r1
				Password_Rec(password);
    13ba:	ce 01       	movw	r24, r28
    13bc:	8d 58       	subi	r24, 0x8D	; 141
    13be:	9f 4f       	sbci	r25, 0xFF	; 255
    13c0:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <Password_Rec>


				Password_Rec(confirmPassword);
    13c4:	ce 01       	movw	r24, r28
    13c6:	88 58       	subi	r24, 0x88	; 136
    13c8:	9f 4f       	sbci	r25, 0xFF	; 255
    13ca:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <Password_Rec>

				passwordVerified = Password_Ver(password, confirmPassword);
    13ce:	ce 01       	movw	r24, r28
    13d0:	8d 58       	subi	r24, 0x8D	; 141
    13d2:	9f 4f       	sbci	r25, 0xFF	; 255
    13d4:	9e 01       	movw	r18, r28
    13d6:	28 58       	subi	r18, 0x88	; 136
    13d8:	3f 4f       	sbci	r19, 0xFF	; 255
    13da:	b9 01       	movw	r22, r18
    13dc:	0e 94 9c 0b 	call	0x1738	; 0x1738 <Password_Ver>
    13e0:	fe 01       	movw	r30, r28
    13e2:	ee 58       	subi	r30, 0x8E	; 142
    13e4:	ff 4f       	sbci	r31, 0xFF	; 255
    13e6:	80 83       	st	Z, r24
    13e8:	80 e0       	ldi	r24, 0x00	; 0
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	a8 e4       	ldi	r26, 0x48	; 72
    13ee:	b2 e4       	ldi	r27, 0x42	; 66
    13f0:	89 8f       	std	Y+25, r24	; 0x19
    13f2:	9a 8f       	std	Y+26, r25	; 0x1a
    13f4:	ab 8f       	std	Y+27, r26	; 0x1b
    13f6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13f8:	69 8d       	ldd	r22, Y+25	; 0x19
    13fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	4a ef       	ldi	r20, 0xFA	; 250
    1406:	54 e4       	ldi	r21, 0x44	; 68
    1408:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    140c:	dc 01       	movw	r26, r24
    140e:	cb 01       	movw	r24, r22
    1410:	8d 8b       	std	Y+21, r24	; 0x15
    1412:	9e 8b       	std	Y+22, r25	; 0x16
    1414:	af 8b       	std	Y+23, r26	; 0x17
    1416:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1418:	6d 89       	ldd	r22, Y+21	; 0x15
    141a:	7e 89       	ldd	r23, Y+22	; 0x16
    141c:	8f 89       	ldd	r24, Y+23	; 0x17
    141e:	98 8d       	ldd	r25, Y+24	; 0x18
    1420:	20 e0       	ldi	r18, 0x00	; 0
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	40 e8       	ldi	r20, 0x80	; 128
    1426:	5f e3       	ldi	r21, 0x3F	; 63
    1428:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    142c:	88 23       	and	r24, r24
    142e:	2c f4       	brge	.+10     	; 0x143a <start+0x8f4>
		__ticks = 1;
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	9c 8b       	std	Y+20, r25	; 0x14
    1436:	8b 8b       	std	Y+19, r24	; 0x13
    1438:	3f c0       	rjmp	.+126    	; 0x14b8 <start+0x972>
	else if (__tmp > 65535)
    143a:	6d 89       	ldd	r22, Y+21	; 0x15
    143c:	7e 89       	ldd	r23, Y+22	; 0x16
    143e:	8f 89       	ldd	r24, Y+23	; 0x17
    1440:	98 8d       	ldd	r25, Y+24	; 0x18
    1442:	20 e0       	ldi	r18, 0x00	; 0
    1444:	3f ef       	ldi	r19, 0xFF	; 255
    1446:	4f e7       	ldi	r20, 0x7F	; 127
    1448:	57 e4       	ldi	r21, 0x47	; 71
    144a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    144e:	18 16       	cp	r1, r24
    1450:	4c f5       	brge	.+82     	; 0x14a4 <start+0x95e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1452:	69 8d       	ldd	r22, Y+25	; 0x19
    1454:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1456:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1458:	9c 8d       	ldd	r25, Y+28	; 0x1c
    145a:	20 e0       	ldi	r18, 0x00	; 0
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	40 e2       	ldi	r20, 0x20	; 32
    1460:	51 e4       	ldi	r21, 0x41	; 65
    1462:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1466:	dc 01       	movw	r26, r24
    1468:	cb 01       	movw	r24, r22
    146a:	bc 01       	movw	r22, r24
    146c:	cd 01       	movw	r24, r26
    146e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1472:	dc 01       	movw	r26, r24
    1474:	cb 01       	movw	r24, r22
    1476:	9c 8b       	std	Y+20, r25	; 0x14
    1478:	8b 8b       	std	Y+19, r24	; 0x13
    147a:	0f c0       	rjmp	.+30     	; 0x149a <start+0x954>
    147c:	88 ec       	ldi	r24, 0xC8	; 200
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	9a 8b       	std	Y+18, r25	; 0x12
    1482:	89 8b       	std	Y+17, r24	; 0x11
    1484:	89 89       	ldd	r24, Y+17	; 0x11
    1486:	9a 89       	ldd	r25, Y+18	; 0x12
    1488:	01 97       	sbiw	r24, 0x01	; 1
    148a:	f1 f7       	brne	.-4      	; 0x1488 <start+0x942>
    148c:	9a 8b       	std	Y+18, r25	; 0x12
    148e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1490:	8b 89       	ldd	r24, Y+19	; 0x13
    1492:	9c 89       	ldd	r25, Y+20	; 0x14
    1494:	01 97       	sbiw	r24, 0x01	; 1
    1496:	9c 8b       	std	Y+20, r25	; 0x14
    1498:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    149a:	8b 89       	ldd	r24, Y+19	; 0x13
    149c:	9c 89       	ldd	r25, Y+20	; 0x14
    149e:	00 97       	sbiw	r24, 0x00	; 0
    14a0:	69 f7       	brne	.-38     	; 0x147c <start+0x936>
    14a2:	14 c0       	rjmp	.+40     	; 0x14cc <start+0x986>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14a4:	6d 89       	ldd	r22, Y+21	; 0x15
    14a6:	7e 89       	ldd	r23, Y+22	; 0x16
    14a8:	8f 89       	ldd	r24, Y+23	; 0x17
    14aa:	98 8d       	ldd	r25, Y+24	; 0x18
    14ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14b0:	dc 01       	movw	r26, r24
    14b2:	cb 01       	movw	r24, r22
    14b4:	9c 8b       	std	Y+20, r25	; 0x14
    14b6:	8b 8b       	std	Y+19, r24	; 0x13
    14b8:	8b 89       	ldd	r24, Y+19	; 0x13
    14ba:	9c 89       	ldd	r25, Y+20	; 0x14
    14bc:	98 8b       	std	Y+16, r25	; 0x10
    14be:	8f 87       	std	Y+15, r24	; 0x0f
    14c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    14c2:	98 89       	ldd	r25, Y+16	; 0x10
    14c4:	01 97       	sbiw	r24, 0x01	; 1
    14c6:	f1 f7       	brne	.-4      	; 0x14c4 <start+0x97e>
    14c8:	98 8b       	std	Y+16, r25	; 0x10
    14ca:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(50);
				UART_sendByte(passwordVerified);
    14cc:	fe 01       	movw	r30, r28
    14ce:	ee 58       	subi	r30, 0x8E	; 142
    14d0:	ff 4f       	sbci	r31, 0xFF	; 255
    14d2:	80 81       	ld	r24, Z
    14d4:	0e 94 f7 13 	call	0x27ee	; 0x27ee <UART_sendByte>

				if(passwordVerified)
    14d8:	fe 01       	movw	r30, r28
    14da:	ee 58       	subi	r30, 0x8E	; 142
    14dc:	ff 4f       	sbci	r31, 0xFF	; 255
    14de:	80 81       	ld	r24, Z
    14e0:	88 23       	and	r24, r24
    14e2:	09 f4       	brne	.+2      	; 0x14e6 <start+0x9a0>
    14e4:	2e cc       	rjmp	.-1956   	; 0xd42 <start+0x1fc>
				{
					Password_Store_EEPROM(password);
    14e6:	ce 01       	movw	r24, r28
    14e8:	8d 58       	subi	r24, 0x8D	; 141
    14ea:	9f 4f       	sbci	r25, 0xFF	; 255
    14ec:	0e 94 42 0c 	call	0x1884	; 0x1884 <Password_Store_EEPROM>
    14f0:	28 cc       	rjmp	.-1968   	; 0xd42 <start+0x1fc>

			}

			else
			{
				falsePasswords++;
    14f2:	80 91 76 00 	lds	r24, 0x0076
    14f6:	90 91 77 00 	lds	r25, 0x0077
    14fa:	01 96       	adiw	r24, 0x01	; 1
    14fc:	90 93 77 00 	sts	0x0077, r25
    1500:	80 93 76 00 	sts	0x0076, r24
				UART_sendByte(falsePasswords);
    1504:	80 91 76 00 	lds	r24, 0x0076
    1508:	90 91 77 00 	lds	r25, 0x0077
    150c:	0e 94 f7 13 	call	0x27ee	; 0x27ee <UART_sendByte>
    1510:	80 e0       	ldi	r24, 0x00	; 0
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	a8 e4       	ldi	r26, 0x48	; 72
    1516:	b2 e4       	ldi	r27, 0x42	; 66
    1518:	8b 87       	std	Y+11, r24	; 0x0b
    151a:	9c 87       	std	Y+12, r25	; 0x0c
    151c:	ad 87       	std	Y+13, r26	; 0x0d
    151e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1520:	6b 85       	ldd	r22, Y+11	; 0x0b
    1522:	7c 85       	ldd	r23, Y+12	; 0x0c
    1524:	8d 85       	ldd	r24, Y+13	; 0x0d
    1526:	9e 85       	ldd	r25, Y+14	; 0x0e
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	4a ef       	ldi	r20, 0xFA	; 250
    152e:	54 e4       	ldi	r21, 0x44	; 68
    1530:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1534:	dc 01       	movw	r26, r24
    1536:	cb 01       	movw	r24, r22
    1538:	8f 83       	std	Y+7, r24	; 0x07
    153a:	98 87       	std	Y+8, r25	; 0x08
    153c:	a9 87       	std	Y+9, r26	; 0x09
    153e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1540:	6f 81       	ldd	r22, Y+7	; 0x07
    1542:	78 85       	ldd	r23, Y+8	; 0x08
    1544:	89 85       	ldd	r24, Y+9	; 0x09
    1546:	9a 85       	ldd	r25, Y+10	; 0x0a
    1548:	20 e0       	ldi	r18, 0x00	; 0
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	40 e8       	ldi	r20, 0x80	; 128
    154e:	5f e3       	ldi	r21, 0x3F	; 63
    1550:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1554:	88 23       	and	r24, r24
    1556:	2c f4       	brge	.+10     	; 0x1562 <start+0xa1c>
		__ticks = 1;
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	9e 83       	std	Y+6, r25	; 0x06
    155e:	8d 83       	std	Y+5, r24	; 0x05
    1560:	3f c0       	rjmp	.+126    	; 0x15e0 <start+0xa9a>
	else if (__tmp > 65535)
    1562:	6f 81       	ldd	r22, Y+7	; 0x07
    1564:	78 85       	ldd	r23, Y+8	; 0x08
    1566:	89 85       	ldd	r24, Y+9	; 0x09
    1568:	9a 85       	ldd	r25, Y+10	; 0x0a
    156a:	20 e0       	ldi	r18, 0x00	; 0
    156c:	3f ef       	ldi	r19, 0xFF	; 255
    156e:	4f e7       	ldi	r20, 0x7F	; 127
    1570:	57 e4       	ldi	r21, 0x47	; 71
    1572:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1576:	18 16       	cp	r1, r24
    1578:	4c f5       	brge	.+82     	; 0x15cc <start+0xa86>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    157a:	6b 85       	ldd	r22, Y+11	; 0x0b
    157c:	7c 85       	ldd	r23, Y+12	; 0x0c
    157e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1580:	9e 85       	ldd	r25, Y+14	; 0x0e
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	40 e2       	ldi	r20, 0x20	; 32
    1588:	51 e4       	ldi	r21, 0x41	; 65
    158a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    158e:	dc 01       	movw	r26, r24
    1590:	cb 01       	movw	r24, r22
    1592:	bc 01       	movw	r22, r24
    1594:	cd 01       	movw	r24, r26
    1596:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    159a:	dc 01       	movw	r26, r24
    159c:	cb 01       	movw	r24, r22
    159e:	9e 83       	std	Y+6, r25	; 0x06
    15a0:	8d 83       	std	Y+5, r24	; 0x05
    15a2:	0f c0       	rjmp	.+30     	; 0x15c2 <start+0xa7c>
    15a4:	88 ec       	ldi	r24, 0xC8	; 200
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	9c 83       	std	Y+4, r25	; 0x04
    15aa:	8b 83       	std	Y+3, r24	; 0x03
    15ac:	8b 81       	ldd	r24, Y+3	; 0x03
    15ae:	9c 81       	ldd	r25, Y+4	; 0x04
    15b0:	01 97       	sbiw	r24, 0x01	; 1
    15b2:	f1 f7       	brne	.-4      	; 0x15b0 <start+0xa6a>
    15b4:	9c 83       	std	Y+4, r25	; 0x04
    15b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15b8:	8d 81       	ldd	r24, Y+5	; 0x05
    15ba:	9e 81       	ldd	r25, Y+6	; 0x06
    15bc:	01 97       	sbiw	r24, 0x01	; 1
    15be:	9e 83       	std	Y+6, r25	; 0x06
    15c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15c2:	8d 81       	ldd	r24, Y+5	; 0x05
    15c4:	9e 81       	ldd	r25, Y+6	; 0x06
    15c6:	00 97       	sbiw	r24, 0x00	; 0
    15c8:	69 f7       	brne	.-38     	; 0x15a4 <start+0xa5e>
    15ca:	14 c0       	rjmp	.+40     	; 0x15f4 <start+0xaae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15cc:	6f 81       	ldd	r22, Y+7	; 0x07
    15ce:	78 85       	ldd	r23, Y+8	; 0x08
    15d0:	89 85       	ldd	r24, Y+9	; 0x09
    15d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d8:	dc 01       	movw	r26, r24
    15da:	cb 01       	movw	r24, r22
    15dc:	9e 83       	std	Y+6, r25	; 0x06
    15de:	8d 83       	std	Y+5, r24	; 0x05
    15e0:	8d 81       	ldd	r24, Y+5	; 0x05
    15e2:	9e 81       	ldd	r25, Y+6	; 0x06
    15e4:	9a 83       	std	Y+2, r25	; 0x02
    15e6:	89 83       	std	Y+1, r24	; 0x01
    15e8:	89 81       	ldd	r24, Y+1	; 0x01
    15ea:	9a 81       	ldd	r25, Y+2	; 0x02
    15ec:	01 97       	sbiw	r24, 0x01	; 1
    15ee:	f1 f7       	brne	.-4      	; 0x15ec <start+0xaa6>
    15f0:	9a 83       	std	Y+2, r25	; 0x02
    15f2:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(50);
				Password_False();
    15f4:	0e 94 1b 0c 	call	0x1836	; 0x1836 <Password_False>
    15f8:	a4 cb       	rjmp	.-2232   	; 0xd42 <start+0x1fc>

000015fa <Password_Rec>:
	}
}


void Password_Rec (uint8 password[])
{
    15fa:	0f 93       	push	r16
    15fc:	1f 93       	push	r17
    15fe:	df 93       	push	r29
    1600:	cf 93       	push	r28
    1602:	cd b7       	in	r28, 0x3d	; 61
    1604:	de b7       	in	r29, 0x3e	; 62
    1606:	61 97       	sbiw	r28, 0x11	; 17
    1608:	0f b6       	in	r0, 0x3f	; 63
    160a:	f8 94       	cli
    160c:	de bf       	out	0x3e, r29	; 62
    160e:	0f be       	out	0x3f, r0	; 63
    1610:	cd bf       	out	0x3d, r28	; 61
    1612:	99 8b       	std	Y+17, r25	; 0x11
    1614:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;

	for (i=0 ; i<5 ; ++i)
    1616:	1f 86       	std	Y+15, r1	; 0x0f
    1618:	0f c0       	rjmp	.+30     	; 0x1638 <Password_Rec+0x3e>
	{
		password [i] = UART_recieveByte();
    161a:	8f 85       	ldd	r24, Y+15	; 0x0f
    161c:	28 2f       	mov	r18, r24
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	88 89       	ldd	r24, Y+16	; 0x10
    1622:	99 89       	ldd	r25, Y+17	; 0x11
    1624:	8c 01       	movw	r16, r24
    1626:	02 0f       	add	r16, r18
    1628:	13 1f       	adc	r17, r19
    162a:	0e 94 0e 14 	call	0x281c	; 0x281c <UART_recieveByte>
    162e:	f8 01       	movw	r30, r16
    1630:	80 83       	st	Z, r24

void Password_Rec (uint8 password[])
{
	uint8 i;

	for (i=0 ; i<5 ; ++i)
    1632:	8f 85       	ldd	r24, Y+15	; 0x0f
    1634:	8f 5f       	subi	r24, 0xFF	; 255
    1636:	8f 87       	std	Y+15, r24	; 0x0f
    1638:	8f 85       	ldd	r24, Y+15	; 0x0f
    163a:	85 30       	cpi	r24, 0x05	; 5
    163c:	70 f3       	brcs	.-36     	; 0x161a <Password_Rec+0x20>
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	aa e7       	ldi	r26, 0x7A	; 122
    1644:	b4 e4       	ldi	r27, 0x44	; 68
    1646:	8b 87       	std	Y+11, r24	; 0x0b
    1648:	9c 87       	std	Y+12, r25	; 0x0c
    164a:	ad 87       	std	Y+13, r26	; 0x0d
    164c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    164e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1650:	7c 85       	ldd	r23, Y+12	; 0x0c
    1652:	8d 85       	ldd	r24, Y+13	; 0x0d
    1654:	9e 85       	ldd	r25, Y+14	; 0x0e
    1656:	20 e0       	ldi	r18, 0x00	; 0
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	4a ef       	ldi	r20, 0xFA	; 250
    165c:	54 e4       	ldi	r21, 0x44	; 68
    165e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1662:	dc 01       	movw	r26, r24
    1664:	cb 01       	movw	r24, r22
    1666:	8f 83       	std	Y+7, r24	; 0x07
    1668:	98 87       	std	Y+8, r25	; 0x08
    166a:	a9 87       	std	Y+9, r26	; 0x09
    166c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    166e:	6f 81       	ldd	r22, Y+7	; 0x07
    1670:	78 85       	ldd	r23, Y+8	; 0x08
    1672:	89 85       	ldd	r24, Y+9	; 0x09
    1674:	9a 85       	ldd	r25, Y+10	; 0x0a
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	40 e8       	ldi	r20, 0x80	; 128
    167c:	5f e3       	ldi	r21, 0x3F	; 63
    167e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1682:	88 23       	and	r24, r24
    1684:	2c f4       	brge	.+10     	; 0x1690 <Password_Rec+0x96>
		__ticks = 1;
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	9e 83       	std	Y+6, r25	; 0x06
    168c:	8d 83       	std	Y+5, r24	; 0x05
    168e:	3f c0       	rjmp	.+126    	; 0x170e <Password_Rec+0x114>
	else if (__tmp > 65535)
    1690:	6f 81       	ldd	r22, Y+7	; 0x07
    1692:	78 85       	ldd	r23, Y+8	; 0x08
    1694:	89 85       	ldd	r24, Y+9	; 0x09
    1696:	9a 85       	ldd	r25, Y+10	; 0x0a
    1698:	20 e0       	ldi	r18, 0x00	; 0
    169a:	3f ef       	ldi	r19, 0xFF	; 255
    169c:	4f e7       	ldi	r20, 0x7F	; 127
    169e:	57 e4       	ldi	r21, 0x47	; 71
    16a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16a4:	18 16       	cp	r1, r24
    16a6:	4c f5       	brge	.+82     	; 0x16fa <Password_Rec+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    16aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    16ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	40 e2       	ldi	r20, 0x20	; 32
    16b6:	51 e4       	ldi	r21, 0x41	; 65
    16b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16bc:	dc 01       	movw	r26, r24
    16be:	cb 01       	movw	r24, r22
    16c0:	bc 01       	movw	r22, r24
    16c2:	cd 01       	movw	r24, r26
    16c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c8:	dc 01       	movw	r26, r24
    16ca:	cb 01       	movw	r24, r22
    16cc:	9e 83       	std	Y+6, r25	; 0x06
    16ce:	8d 83       	std	Y+5, r24	; 0x05
    16d0:	0f c0       	rjmp	.+30     	; 0x16f0 <Password_Rec+0xf6>
    16d2:	88 ec       	ldi	r24, 0xC8	; 200
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	9c 83       	std	Y+4, r25	; 0x04
    16d8:	8b 83       	std	Y+3, r24	; 0x03
    16da:	8b 81       	ldd	r24, Y+3	; 0x03
    16dc:	9c 81       	ldd	r25, Y+4	; 0x04
    16de:	01 97       	sbiw	r24, 0x01	; 1
    16e0:	f1 f7       	brne	.-4      	; 0x16de <Password_Rec+0xe4>
    16e2:	9c 83       	std	Y+4, r25	; 0x04
    16e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e6:	8d 81       	ldd	r24, Y+5	; 0x05
    16e8:	9e 81       	ldd	r25, Y+6	; 0x06
    16ea:	01 97       	sbiw	r24, 0x01	; 1
    16ec:	9e 83       	std	Y+6, r25	; 0x06
    16ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16f0:	8d 81       	ldd	r24, Y+5	; 0x05
    16f2:	9e 81       	ldd	r25, Y+6	; 0x06
    16f4:	00 97       	sbiw	r24, 0x00	; 0
    16f6:	69 f7       	brne	.-38     	; 0x16d2 <Password_Rec+0xd8>
    16f8:	14 c0       	rjmp	.+40     	; 0x1722 <Password_Rec+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16fa:	6f 81       	ldd	r22, Y+7	; 0x07
    16fc:	78 85       	ldd	r23, Y+8	; 0x08
    16fe:	89 85       	ldd	r24, Y+9	; 0x09
    1700:	9a 85       	ldd	r25, Y+10	; 0x0a
    1702:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1706:	dc 01       	movw	r26, r24
    1708:	cb 01       	movw	r24, r22
    170a:	9e 83       	std	Y+6, r25	; 0x06
    170c:	8d 83       	std	Y+5, r24	; 0x05
    170e:	8d 81       	ldd	r24, Y+5	; 0x05
    1710:	9e 81       	ldd	r25, Y+6	; 0x06
    1712:	9a 83       	std	Y+2, r25	; 0x02
    1714:	89 83       	std	Y+1, r24	; 0x01
    1716:	89 81       	ldd	r24, Y+1	; 0x01
    1718:	9a 81       	ldd	r25, Y+2	; 0x02
    171a:	01 97       	sbiw	r24, 0x01	; 1
    171c:	f1 f7       	brne	.-4      	; 0x171a <Password_Rec+0x120>
    171e:	9a 83       	std	Y+2, r25	; 0x02
    1720:	89 83       	std	Y+1, r24	; 0x01
	{
		password [i] = UART_recieveByte();
	}
	_delay_ms(1000);
}
    1722:	61 96       	adiw	r28, 0x11	; 17
    1724:	0f b6       	in	r0, 0x3f	; 63
    1726:	f8 94       	cli
    1728:	de bf       	out	0x3e, r29	; 62
    172a:	0f be       	out	0x3f, r0	; 63
    172c:	cd bf       	out	0x3d, r28	; 61
    172e:	cf 91       	pop	r28
    1730:	df 91       	pop	r29
    1732:	1f 91       	pop	r17
    1734:	0f 91       	pop	r16
    1736:	08 95       	ret

00001738 <Password_Ver>:



uint8 Password_Ver (uint8 password[] , uint8 confirmPassword[])
{
    1738:	df 93       	push	r29
    173a:	cf 93       	push	r28
    173c:	00 d0       	rcall	.+0      	; 0x173e <Password_Ver+0x6>
    173e:	00 d0       	rcall	.+0      	; 0x1740 <Password_Ver+0x8>
    1740:	00 d0       	rcall	.+0      	; 0x1742 <Password_Ver+0xa>
    1742:	cd b7       	in	r28, 0x3d	; 61
    1744:	de b7       	in	r29, 0x3e	; 62
    1746:	9b 83       	std	Y+3, r25	; 0x03
    1748:	8a 83       	std	Y+2, r24	; 0x02
    174a:	7d 83       	std	Y+5, r23	; 0x05
    174c:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i;

	for (i=0 ; i<5 ; ++i)
    174e:	19 82       	std	Y+1, r1	; 0x01
    1750:	19 c0       	rjmp	.+50     	; 0x1784 <Password_Ver+0x4c>
	{
		if (password[i] != confirmPassword[i])
    1752:	89 81       	ldd	r24, Y+1	; 0x01
    1754:	28 2f       	mov	r18, r24
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	8a 81       	ldd	r24, Y+2	; 0x02
    175a:	9b 81       	ldd	r25, Y+3	; 0x03
    175c:	fc 01       	movw	r30, r24
    175e:	e2 0f       	add	r30, r18
    1760:	f3 1f       	adc	r31, r19
    1762:	40 81       	ld	r20, Z
    1764:	89 81       	ldd	r24, Y+1	; 0x01
    1766:	28 2f       	mov	r18, r24
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	8c 81       	ldd	r24, Y+4	; 0x04
    176c:	9d 81       	ldd	r25, Y+5	; 0x05
    176e:	fc 01       	movw	r30, r24
    1770:	e2 0f       	add	r30, r18
    1772:	f3 1f       	adc	r31, r19
    1774:	80 81       	ld	r24, Z
    1776:	48 17       	cp	r20, r24
    1778:	11 f0       	breq	.+4      	; 0x177e <Password_Ver+0x46>
		{
			return 0;
    177a:	1e 82       	std	Y+6, r1	; 0x06
    177c:	08 c0       	rjmp	.+16     	; 0x178e <Password_Ver+0x56>

uint8 Password_Ver (uint8 password[] , uint8 confirmPassword[])
{
	uint8 i;

	for (i=0 ; i<5 ; ++i)
    177e:	89 81       	ldd	r24, Y+1	; 0x01
    1780:	8f 5f       	subi	r24, 0xFF	; 255
    1782:	89 83       	std	Y+1, r24	; 0x01
    1784:	89 81       	ldd	r24, Y+1	; 0x01
    1786:	85 30       	cpi	r24, 0x05	; 5
    1788:	20 f3       	brcs	.-56     	; 0x1752 <Password_Ver+0x1a>
		if (password[i] != confirmPassword[i])
		{
			return 0;
		}
	}
	return 1;
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	8e 83       	std	Y+6, r24	; 0x06
    178e:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1790:	26 96       	adiw	r28, 0x06	; 6
    1792:	0f b6       	in	r0, 0x3f	; 63
    1794:	f8 94       	cli
    1796:	de bf       	out	0x3e, r29	; 62
    1798:	0f be       	out	0x3f, r0	; 63
    179a:	cd bf       	out	0x3d, r28	; 61
    179c:	cf 91       	pop	r28
    179e:	df 91       	pop	r29
    17a0:	08 95       	ret

000017a2 <openDoor>:




void openDoor (void)
{
    17a2:	df 93       	push	r29
    17a4:	cf 93       	push	r28
    17a6:	cd b7       	in	r28, 0x3d	; 61
    17a8:	de b7       	in	r29, 0x3e	; 62
	Timer1_init(&timerConfig);
    17aa:	88 e6       	ldi	r24, 0x68	; 104
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	0e 94 4d 12 	call	0x249a	; 0x249a <Timer1_init>

	DcMotor_Rotate(CW);
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <DcMotor_Rotate>
	while (counter < 15);
    17b8:	80 91 74 00 	lds	r24, 0x0074
    17bc:	90 91 75 00 	lds	r25, 0x0075
    17c0:	8f 30       	cpi	r24, 0x0F	; 15
    17c2:	91 05       	cpc	r25, r1
    17c4:	cc f3       	brlt	.-14     	; 0x17b8 <openDoor+0x16>
	counter = 0;
    17c6:	10 92 75 00 	sts	0x0075, r1
    17ca:	10 92 74 00 	sts	0x0074, r1
	DcMotor_Rotate(STOP);
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <DcMotor_Rotate>


	while (counter < 3);
    17d4:	80 91 74 00 	lds	r24, 0x0074
    17d8:	90 91 75 00 	lds	r25, 0x0075
    17dc:	83 30       	cpi	r24, 0x03	; 3
    17de:	91 05       	cpc	r25, r1
    17e0:	cc f3       	brlt	.-14     	; 0x17d4 <openDoor+0x32>
	counter = 0;
    17e2:	10 92 75 00 	sts	0x0075, r1
    17e6:	10 92 74 00 	sts	0x0074, r1
	DcMotor_Rotate(ACW);
    17ea:	82 e0       	ldi	r24, 0x02	; 2
    17ec:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <DcMotor_Rotate>


	while (counter < 15);
    17f0:	80 91 74 00 	lds	r24, 0x0074
    17f4:	90 91 75 00 	lds	r25, 0x0075
    17f8:	8f 30       	cpi	r24, 0x0F	; 15
    17fa:	91 05       	cpc	r25, r1
    17fc:	cc f3       	brlt	.-14     	; 0x17f0 <openDoor+0x4e>
	counter = 0;
    17fe:	10 92 75 00 	sts	0x0075, r1
    1802:	10 92 74 00 	sts	0x0074, r1
	DcMotor_Rotate(STOP);
    1806:	80 e0       	ldi	r24, 0x00	; 0
    1808:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <DcMotor_Rotate>
	Timer1_deInit();
    180c:	0e 94 b0 12 	call	0x2560	; 0x2560 <Timer1_deInit>
}
    1810:	cf 91       	pop	r28
    1812:	df 91       	pop	r29
    1814:	08 95       	ret

00001816 <timerHandler>:




void timerHandler(void)
{
    1816:	df 93       	push	r29
    1818:	cf 93       	push	r28
    181a:	cd b7       	in	r28, 0x3d	; 61
    181c:	de b7       	in	r29, 0x3e	; 62
	counter++;
    181e:	80 91 74 00 	lds	r24, 0x0074
    1822:	90 91 75 00 	lds	r25, 0x0075
    1826:	01 96       	adiw	r24, 0x01	; 1
    1828:	90 93 75 00 	sts	0x0075, r25
    182c:	80 93 74 00 	sts	0x0074, r24
}
    1830:	cf 91       	pop	r28
    1832:	df 91       	pop	r29
    1834:	08 95       	ret

00001836 <Password_False>:




void Password_False (void)
{
    1836:	df 93       	push	r29
    1838:	cf 93       	push	r28
    183a:	cd b7       	in	r28, 0x3d	; 61
    183c:	de b7       	in	r29, 0x3e	; 62
	if (falsePasswords >= 3)
    183e:	80 91 76 00 	lds	r24, 0x0076
    1842:	90 91 77 00 	lds	r25, 0x0077
    1846:	83 30       	cpi	r24, 0x03	; 3
    1848:	91 05       	cpc	r25, r1
    184a:	cc f0       	brlt	.+50     	; 0x187e <Password_False+0x48>
	{
		falsePasswords = 0;
    184c:	10 92 77 00 	sts	0x0077, r1
    1850:	10 92 76 00 	sts	0x0076, r1
		Timer1_init (&timerConfig);
    1854:	88 e6       	ldi	r24, 0x68	; 104
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	0e 94 4d 12 	call	0x249a	; 0x249a <Timer1_init>
		Buzzer_on();
    185c:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <Buzzer_on>
		while (counter < 60);
    1860:	80 91 74 00 	lds	r24, 0x0074
    1864:	90 91 75 00 	lds	r25, 0x0075
    1868:	8c 33       	cpi	r24, 0x3C	; 60
    186a:	91 05       	cpc	r25, r1
    186c:	cc f3       	brlt	.-14     	; 0x1860 <Password_False+0x2a>
		Buzzer_off();
    186e:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <Buzzer_off>
		counter = 0;
    1872:	10 92 75 00 	sts	0x0075, r1
    1876:	10 92 74 00 	sts	0x0074, r1
		Timer1_deInit();
    187a:	0e 94 b0 12 	call	0x2560	; 0x2560 <Timer1_deInit>
	}
}
    187e:	cf 91       	pop	r28
    1880:	df 91       	pop	r29
    1882:	08 95       	ret

00001884 <Password_Store_EEPROM>:



void Password_Store_EEPROM (uint8 password[])
{
    1884:	df 93       	push	r29
    1886:	cf 93       	push	r28
    1888:	cd b7       	in	r28, 0x3d	; 61
    188a:	de b7       	in	r29, 0x3e	; 62
    188c:	61 97       	sbiw	r28, 0x11	; 17
    188e:	0f b6       	in	r0, 0x3f	; 63
    1890:	f8 94       	cli
    1892:	de bf       	out	0x3e, r29	; 62
    1894:	0f be       	out	0x3f, r0	; 63
    1896:	cd bf       	out	0x3d, r28	; 61
    1898:	99 8b       	std	Y+17, r25	; 0x11
    189a:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;
	for (i=0 ; i<5 ; ++i)
    189c:	1f 86       	std	Y+15, r1	; 0x0f
    189e:	88 c0       	rjmp	.+272    	; 0x19b0 <Password_Store_EEPROM+0x12c>
	{
	EEPROM_writeByte ((0X0090 + i) , (password[i]));
    18a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    18a2:	88 2f       	mov	r24, r24
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	80 57       	subi	r24, 0x70	; 112
    18a8:	9f 4f       	sbci	r25, 0xFF	; 255
    18aa:	ac 01       	movw	r20, r24
    18ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    18ae:	28 2f       	mov	r18, r24
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	88 89       	ldd	r24, Y+16	; 0x10
    18b4:	99 89       	ldd	r25, Y+17	; 0x11
    18b6:	fc 01       	movw	r30, r24
    18b8:	e2 0f       	add	r30, r18
    18ba:	f3 1f       	adc	r31, r19
    18bc:	20 81       	ld	r18, Z
    18be:	ca 01       	movw	r24, r20
    18c0:	62 2f       	mov	r22, r18
    18c2:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <EEPROM_writeByte>
    18c6:	80 e0       	ldi	r24, 0x00	; 0
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	a8 e4       	ldi	r26, 0x48	; 72
    18cc:	b2 e4       	ldi	r27, 0x42	; 66
    18ce:	8b 87       	std	Y+11, r24	; 0x0b
    18d0:	9c 87       	std	Y+12, r25	; 0x0c
    18d2:	ad 87       	std	Y+13, r26	; 0x0d
    18d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    18d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    18da:	8d 85       	ldd	r24, Y+13	; 0x0d
    18dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    18de:	20 e0       	ldi	r18, 0x00	; 0
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	4a ef       	ldi	r20, 0xFA	; 250
    18e4:	54 e4       	ldi	r21, 0x44	; 68
    18e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ea:	dc 01       	movw	r26, r24
    18ec:	cb 01       	movw	r24, r22
    18ee:	8f 83       	std	Y+7, r24	; 0x07
    18f0:	98 87       	std	Y+8, r25	; 0x08
    18f2:	a9 87       	std	Y+9, r26	; 0x09
    18f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18f6:	6f 81       	ldd	r22, Y+7	; 0x07
    18f8:	78 85       	ldd	r23, Y+8	; 0x08
    18fa:	89 85       	ldd	r24, Y+9	; 0x09
    18fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    18fe:	20 e0       	ldi	r18, 0x00	; 0
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	40 e8       	ldi	r20, 0x80	; 128
    1904:	5f e3       	ldi	r21, 0x3F	; 63
    1906:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    190a:	88 23       	and	r24, r24
    190c:	2c f4       	brge	.+10     	; 0x1918 <Password_Store_EEPROM+0x94>
		__ticks = 1;
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	9e 83       	std	Y+6, r25	; 0x06
    1914:	8d 83       	std	Y+5, r24	; 0x05
    1916:	3f c0       	rjmp	.+126    	; 0x1996 <Password_Store_EEPROM+0x112>
	else if (__tmp > 65535)
    1918:	6f 81       	ldd	r22, Y+7	; 0x07
    191a:	78 85       	ldd	r23, Y+8	; 0x08
    191c:	89 85       	ldd	r24, Y+9	; 0x09
    191e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	3f ef       	ldi	r19, 0xFF	; 255
    1924:	4f e7       	ldi	r20, 0x7F	; 127
    1926:	57 e4       	ldi	r21, 0x47	; 71
    1928:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    192c:	18 16       	cp	r1, r24
    192e:	4c f5       	brge	.+82     	; 0x1982 <Password_Store_EEPROM+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1930:	6b 85       	ldd	r22, Y+11	; 0x0b
    1932:	7c 85       	ldd	r23, Y+12	; 0x0c
    1934:	8d 85       	ldd	r24, Y+13	; 0x0d
    1936:	9e 85       	ldd	r25, Y+14	; 0x0e
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	40 e2       	ldi	r20, 0x20	; 32
    193e:	51 e4       	ldi	r21, 0x41	; 65
    1940:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1944:	dc 01       	movw	r26, r24
    1946:	cb 01       	movw	r24, r22
    1948:	bc 01       	movw	r22, r24
    194a:	cd 01       	movw	r24, r26
    194c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1950:	dc 01       	movw	r26, r24
    1952:	cb 01       	movw	r24, r22
    1954:	9e 83       	std	Y+6, r25	; 0x06
    1956:	8d 83       	std	Y+5, r24	; 0x05
    1958:	0f c0       	rjmp	.+30     	; 0x1978 <Password_Store_EEPROM+0xf4>
    195a:	88 ec       	ldi	r24, 0xC8	; 200
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	9c 83       	std	Y+4, r25	; 0x04
    1960:	8b 83       	std	Y+3, r24	; 0x03
    1962:	8b 81       	ldd	r24, Y+3	; 0x03
    1964:	9c 81       	ldd	r25, Y+4	; 0x04
    1966:	01 97       	sbiw	r24, 0x01	; 1
    1968:	f1 f7       	brne	.-4      	; 0x1966 <Password_Store_EEPROM+0xe2>
    196a:	9c 83       	std	Y+4, r25	; 0x04
    196c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    196e:	8d 81       	ldd	r24, Y+5	; 0x05
    1970:	9e 81       	ldd	r25, Y+6	; 0x06
    1972:	01 97       	sbiw	r24, 0x01	; 1
    1974:	9e 83       	std	Y+6, r25	; 0x06
    1976:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1978:	8d 81       	ldd	r24, Y+5	; 0x05
    197a:	9e 81       	ldd	r25, Y+6	; 0x06
    197c:	00 97       	sbiw	r24, 0x00	; 0
    197e:	69 f7       	brne	.-38     	; 0x195a <Password_Store_EEPROM+0xd6>
    1980:	14 c0       	rjmp	.+40     	; 0x19aa <Password_Store_EEPROM+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1982:	6f 81       	ldd	r22, Y+7	; 0x07
    1984:	78 85       	ldd	r23, Y+8	; 0x08
    1986:	89 85       	ldd	r24, Y+9	; 0x09
    1988:	9a 85       	ldd	r25, Y+10	; 0x0a
    198a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    198e:	dc 01       	movw	r26, r24
    1990:	cb 01       	movw	r24, r22
    1992:	9e 83       	std	Y+6, r25	; 0x06
    1994:	8d 83       	std	Y+5, r24	; 0x05
    1996:	8d 81       	ldd	r24, Y+5	; 0x05
    1998:	9e 81       	ldd	r25, Y+6	; 0x06
    199a:	9a 83       	std	Y+2, r25	; 0x02
    199c:	89 83       	std	Y+1, r24	; 0x01
    199e:	89 81       	ldd	r24, Y+1	; 0x01
    19a0:	9a 81       	ldd	r25, Y+2	; 0x02
    19a2:	01 97       	sbiw	r24, 0x01	; 1
    19a4:	f1 f7       	brne	.-4      	; 0x19a2 <Password_Store_EEPROM+0x11e>
    19a6:	9a 83       	std	Y+2, r25	; 0x02
    19a8:	89 83       	std	Y+1, r24	; 0x01


void Password_Store_EEPROM (uint8 password[])
{
	uint8 i;
	for (i=0 ; i<5 ; ++i)
    19aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    19ac:	8f 5f       	subi	r24, 0xFF	; 255
    19ae:	8f 87       	std	Y+15, r24	; 0x0f
    19b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    19b2:	85 30       	cpi	r24, 0x05	; 5
    19b4:	08 f4       	brcc	.+2      	; 0x19b8 <Password_Store_EEPROM+0x134>
    19b6:	74 cf       	rjmp	.-280    	; 0x18a0 <Password_Store_EEPROM+0x1c>
	{
	EEPROM_writeByte ((0X0090 + i) , (password[i]));
	_delay_ms(50);
	}
}
    19b8:	61 96       	adiw	r28, 0x11	; 17
    19ba:	0f b6       	in	r0, 0x3f	; 63
    19bc:	f8 94       	cli
    19be:	de bf       	out	0x3e, r29	; 62
    19c0:	0f be       	out	0x3f, r0	; 63
    19c2:	cd bf       	out	0x3d, r28	; 61
    19c4:	cf 91       	pop	r28
    19c6:	df 91       	pop	r29
    19c8:	08 95       	ret

000019ca <Password_Read_EEPROM>:



void Password_Read_EEPROM (uint8 password [])
{
    19ca:	df 93       	push	r29
    19cc:	cf 93       	push	r28
    19ce:	cd b7       	in	r28, 0x3d	; 61
    19d0:	de b7       	in	r29, 0x3e	; 62
    19d2:	61 97       	sbiw	r28, 0x11	; 17
    19d4:	0f b6       	in	r0, 0x3f	; 63
    19d6:	f8 94       	cli
    19d8:	de bf       	out	0x3e, r29	; 62
    19da:	0f be       	out	0x3f, r0	; 63
    19dc:	cd bf       	out	0x3d, r28	; 61
    19de:	99 8b       	std	Y+17, r25	; 0x11
    19e0:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;
	for (i=0 ; i<5 ; ++i)
    19e2:	1f 86       	std	Y+15, r1	; 0x0f
    19e4:	86 c0       	rjmp	.+268    	; 0x1af2 <Password_Read_EEPROM+0x128>
	{
		EEPROM_readByte((0x0090 + i) , (password + i));
    19e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    19e8:	88 2f       	mov	r24, r24
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	80 57       	subi	r24, 0x70	; 112
    19ee:	9f 4f       	sbci	r25, 0xFF	; 255
    19f0:	ac 01       	movw	r20, r24
    19f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    19f4:	28 2f       	mov	r18, r24
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	88 89       	ldd	r24, Y+16	; 0x10
    19fa:	99 89       	ldd	r25, Y+17	; 0x11
    19fc:	28 0f       	add	r18, r24
    19fe:	39 1f       	adc	r19, r25
    1a00:	ca 01       	movw	r24, r20
    1a02:	b9 01       	movw	r22, r18
    1a04:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <EEPROM_readByte>
    1a08:	80 e0       	ldi	r24, 0x00	; 0
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	a8 e4       	ldi	r26, 0x48	; 72
    1a0e:	b2 e4       	ldi	r27, 0x42	; 66
    1a10:	8b 87       	std	Y+11, r24	; 0x0b
    1a12:	9c 87       	std	Y+12, r25	; 0x0c
    1a14:	ad 87       	std	Y+13, r26	; 0x0d
    1a16:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a18:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	4a ef       	ldi	r20, 0xFA	; 250
    1a26:	54 e4       	ldi	r21, 0x44	; 68
    1a28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	8f 83       	std	Y+7, r24	; 0x07
    1a32:	98 87       	std	Y+8, r25	; 0x08
    1a34:	a9 87       	std	Y+9, r26	; 0x09
    1a36:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a38:	6f 81       	ldd	r22, Y+7	; 0x07
    1a3a:	78 85       	ldd	r23, Y+8	; 0x08
    1a3c:	89 85       	ldd	r24, Y+9	; 0x09
    1a3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	40 e8       	ldi	r20, 0x80	; 128
    1a46:	5f e3       	ldi	r21, 0x3F	; 63
    1a48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a4c:	88 23       	and	r24, r24
    1a4e:	2c f4       	brge	.+10     	; 0x1a5a <Password_Read_EEPROM+0x90>
		__ticks = 1;
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	9e 83       	std	Y+6, r25	; 0x06
    1a56:	8d 83       	std	Y+5, r24	; 0x05
    1a58:	3f c0       	rjmp	.+126    	; 0x1ad8 <Password_Read_EEPROM+0x10e>
	else if (__tmp > 65535)
    1a5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a5c:	78 85       	ldd	r23, Y+8	; 0x08
    1a5e:	89 85       	ldd	r24, Y+9	; 0x09
    1a60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	3f ef       	ldi	r19, 0xFF	; 255
    1a66:	4f e7       	ldi	r20, 0x7F	; 127
    1a68:	57 e4       	ldi	r21, 0x47	; 71
    1a6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a6e:	18 16       	cp	r1, r24
    1a70:	4c f5       	brge	.+82     	; 0x1ac4 <Password_Read_EEPROM+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a72:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a74:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a76:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a78:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	40 e2       	ldi	r20, 0x20	; 32
    1a80:	51 e4       	ldi	r21, 0x41	; 65
    1a82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a86:	dc 01       	movw	r26, r24
    1a88:	cb 01       	movw	r24, r22
    1a8a:	bc 01       	movw	r22, r24
    1a8c:	cd 01       	movw	r24, r26
    1a8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a92:	dc 01       	movw	r26, r24
    1a94:	cb 01       	movw	r24, r22
    1a96:	9e 83       	std	Y+6, r25	; 0x06
    1a98:	8d 83       	std	Y+5, r24	; 0x05
    1a9a:	0f c0       	rjmp	.+30     	; 0x1aba <Password_Read_EEPROM+0xf0>
    1a9c:	88 ec       	ldi	r24, 0xC8	; 200
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	9c 83       	std	Y+4, r25	; 0x04
    1aa2:	8b 83       	std	Y+3, r24	; 0x03
    1aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa6:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa8:	01 97       	sbiw	r24, 0x01	; 1
    1aaa:	f1 f7       	brne	.-4      	; 0x1aa8 <Password_Read_EEPROM+0xde>
    1aac:	9c 83       	std	Y+4, r25	; 0x04
    1aae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab4:	01 97       	sbiw	r24, 0x01	; 1
    1ab6:	9e 83       	std	Y+6, r25	; 0x06
    1ab8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aba:	8d 81       	ldd	r24, Y+5	; 0x05
    1abc:	9e 81       	ldd	r25, Y+6	; 0x06
    1abe:	00 97       	sbiw	r24, 0x00	; 0
    1ac0:	69 f7       	brne	.-38     	; 0x1a9c <Password_Read_EEPROM+0xd2>
    1ac2:	14 c0       	rjmp	.+40     	; 0x1aec <Password_Read_EEPROM+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ac4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac6:	78 85       	ldd	r23, Y+8	; 0x08
    1ac8:	89 85       	ldd	r24, Y+9	; 0x09
    1aca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1acc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	9e 83       	std	Y+6, r25	; 0x06
    1ad6:	8d 83       	std	Y+5, r24	; 0x05
    1ad8:	8d 81       	ldd	r24, Y+5	; 0x05
    1ada:	9e 81       	ldd	r25, Y+6	; 0x06
    1adc:	9a 83       	std	Y+2, r25	; 0x02
    1ade:	89 83       	std	Y+1, r24	; 0x01
    1ae0:	89 81       	ldd	r24, Y+1	; 0x01
    1ae2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae4:	01 97       	sbiw	r24, 0x01	; 1
    1ae6:	f1 f7       	brne	.-4      	; 0x1ae4 <Password_Read_EEPROM+0x11a>
    1ae8:	9a 83       	std	Y+2, r25	; 0x02
    1aea:	89 83       	std	Y+1, r24	; 0x01


void Password_Read_EEPROM (uint8 password [])
{
	uint8 i;
	for (i=0 ; i<5 ; ++i)
    1aec:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aee:	8f 5f       	subi	r24, 0xFF	; 255
    1af0:	8f 87       	std	Y+15, r24	; 0x0f
    1af2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1af4:	85 30       	cpi	r24, 0x05	; 5
    1af6:	08 f4       	brcc	.+2      	; 0x1afa <Password_Read_EEPROM+0x130>
    1af8:	76 cf       	rjmp	.-276    	; 0x19e6 <Password_Read_EEPROM+0x1c>
	{
		EEPROM_readByte((0x0090 + i) , (password + i));
		_delay_ms(50);
	}
}
    1afa:	61 96       	adiw	r28, 0x11	; 17
    1afc:	0f b6       	in	r0, 0x3f	; 63
    1afe:	f8 94       	cli
    1b00:	de bf       	out	0x3e, r29	; 62
    1b02:	0f be       	out	0x3f, r0	; 63
    1b04:	cd bf       	out	0x3d, r28	; 61
    1b06:	cf 91       	pop	r28
    1b08:	df 91       	pop	r29
    1b0a:	08 95       	ret

00001b0c <Buzzer_init>:
/*******************************************************************************
 *                      Functions Prototypes                                   *
 *******************************************************************************/

void Buzzer_init(void)
{
    1b0c:	df 93       	push	r29
    1b0e:	cf 93       	push	r28
    1b10:	cd b7       	in	r28, 0x3d	; 61
    1b12:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection (PORTB_ID , PIN0_ID , PIN_OUTPUT);
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	60 e0       	ldi	r22, 0x00	; 0
    1b18:	41 e0       	ldi	r20, 0x01	; 1
    1b1a:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <GPIO_setupPinDirection>


	GPIO_writePin (PORTB_ID , PIN0_ID , LOGIC_LOW);
    1b1e:	81 e0       	ldi	r24, 0x01	; 1
    1b20:	60 e0       	ldi	r22, 0x00	; 0
    1b22:	40 e0       	ldi	r20, 0x00	; 0
    1b24:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <GPIO_writePin>
}
    1b28:	cf 91       	pop	r28
    1b2a:	df 91       	pop	r29
    1b2c:	08 95       	ret

00001b2e <Buzzer_on>:


void Buzzer_on(void)
{
    1b2e:	df 93       	push	r29
    1b30:	cf 93       	push	r28
    1b32:	cd b7       	in	r28, 0x3d	; 61
    1b34:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin (PORTB_ID , PIN0_ID , LOGIC_HIGH);
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	60 e0       	ldi	r22, 0x00	; 0
    1b3a:	41 e0       	ldi	r20, 0x01	; 1
    1b3c:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <GPIO_writePin>
}
    1b40:	cf 91       	pop	r28
    1b42:	df 91       	pop	r29
    1b44:	08 95       	ret

00001b46 <Buzzer_off>:


void Buzzer_off(void)
{
    1b46:	df 93       	push	r29
    1b48:	cf 93       	push	r28
    1b4a:	cd b7       	in	r28, 0x3d	; 61
    1b4c:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin (PORTB_ID , PIN0_ID , LOGIC_LOW);
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	60 e0       	ldi	r22, 0x00	; 0
    1b52:	40 e0       	ldi	r20, 0x00	; 0
    1b54:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <GPIO_writePin>
}
    1b58:	cf 91       	pop	r28
    1b5a:	df 91       	pop	r29
    1b5c:	08 95       	ret

00001b5e <DcMotor_Init>:
 *
 *
 * [Returns]: void
 */
void DcMotor_Init(void)
{
    1b5e:	df 93       	push	r29
    1b60:	cf 93       	push	r28
    1b62:	cd b7       	in	r28, 0x3d	; 61
    1b64:	de b7       	in	r29, 0x3e	; 62
	/*Set motor pins as output pins*/
	GPIO_setupPinDirection (DC_MOTOR_PORT_ID,DC_MOTOR_PIN_1,PIN_OUTPUT);
    1b66:	82 e0       	ldi	r24, 0x02	; 2
    1b68:	64 e0       	ldi	r22, 0x04	; 4
    1b6a:	41 e0       	ldi	r20, 0x01	; 1
    1b6c:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <GPIO_setupPinDirection>
	GPIO_setupPinDirection (DC_MOTOR_PORT_ID,DC_MOTOR_PIN_2,PIN_OUTPUT);
    1b70:	82 e0       	ldi	r24, 0x02	; 2
    1b72:	65 e0       	ldi	r22, 0x05	; 5
    1b74:	41 e0       	ldi	r20, 0x01	; 1
    1b76:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <GPIO_setupPinDirection>



	/*Stop the motor at first*/
	GPIO_writePin (DC_MOTOR_PORT_ID,DC_MOTOR_PIN_1,LOGIC_LOW);
    1b7a:	82 e0       	ldi	r24, 0x02	; 2
    1b7c:	64 e0       	ldi	r22, 0x04	; 4
    1b7e:	40 e0       	ldi	r20, 0x00	; 0
    1b80:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <GPIO_writePin>
	GPIO_writePin (DC_MOTOR_PORT_ID,DC_MOTOR_PIN_2,LOGIC_LOW);
    1b84:	82 e0       	ldi	r24, 0x02	; 2
    1b86:	65 e0       	ldi	r22, 0x05	; 5
    1b88:	40 e0       	ldi	r20, 0x00	; 0
    1b8a:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <GPIO_writePin>

}
    1b8e:	cf 91       	pop	r28
    1b90:	df 91       	pop	r29
    1b92:	08 95       	ret

00001b94 <DcMotor_Rotate>:
 * [Description] : Function that responsible for rotate the DC Motor CW/ or A-CW or stop the motor based on the state input state value.
 *
 * [Returns]: void
 */
void DcMotor_Rotate(DcMotor_State state)
{
    1b94:	df 93       	push	r29
    1b96:	cf 93       	push	r28
    1b98:	0f 92       	push	r0
    1b9a:	cd b7       	in	r28, 0x3d	; 61
    1b9c:	de b7       	in	r29, 0x3e	; 62
    1b9e:	89 83       	std	Y+1, r24	; 0x01
	if (state == STOP)
    1ba0:	89 81       	ldd	r24, Y+1	; 0x01
    1ba2:	88 23       	and	r24, r24
    1ba4:	59 f4       	brne	.+22     	; 0x1bbc <DcMotor_Rotate+0x28>
	{
		/*Stop the motor*/
		GPIO_writePin (DC_MOTOR_PORT_ID,DC_MOTOR_PIN_1,LOGIC_LOW);
    1ba6:	82 e0       	ldi	r24, 0x02	; 2
    1ba8:	64 e0       	ldi	r22, 0x04	; 4
    1baa:	40 e0       	ldi	r20, 0x00	; 0
    1bac:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <GPIO_writePin>
		GPIO_writePin (DC_MOTOR_PORT_ID,DC_MOTOR_PIN_2,LOGIC_LOW);
    1bb0:	82 e0       	ldi	r24, 0x02	; 2
    1bb2:	65 e0       	ldi	r22, 0x05	; 5
    1bb4:	40 e0       	ldi	r20, 0x00	; 0
    1bb6:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <GPIO_writePin>
    1bba:	1b c0       	rjmp	.+54     	; 0x1bf2 <DcMotor_Rotate+0x5e>
	}

	else if (state == CW)
    1bbc:	89 81       	ldd	r24, Y+1	; 0x01
    1bbe:	81 30       	cpi	r24, 0x01	; 1
    1bc0:	59 f4       	brne	.+22     	; 0x1bd8 <DcMotor_Rotate+0x44>
	{
		/*Rotate Clockwise*/
		GPIO_writePin (DC_MOTOR_PORT_ID,DC_MOTOR_PIN_1,LOGIC_LOW);
    1bc2:	82 e0       	ldi	r24, 0x02	; 2
    1bc4:	64 e0       	ldi	r22, 0x04	; 4
    1bc6:	40 e0       	ldi	r20, 0x00	; 0
    1bc8:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <GPIO_writePin>
		GPIO_writePin (DC_MOTOR_PORT_ID,DC_MOTOR_PIN_2,LOGIC_HIGH);
    1bcc:	82 e0       	ldi	r24, 0x02	; 2
    1bce:	65 e0       	ldi	r22, 0x05	; 5
    1bd0:	41 e0       	ldi	r20, 0x01	; 1
    1bd2:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <GPIO_writePin>
    1bd6:	0d c0       	rjmp	.+26     	; 0x1bf2 <DcMotor_Rotate+0x5e>
	}

	else if (state == ACW)
    1bd8:	89 81       	ldd	r24, Y+1	; 0x01
    1bda:	82 30       	cpi	r24, 0x02	; 2
    1bdc:	51 f4       	brne	.+20     	; 0x1bf2 <DcMotor_Rotate+0x5e>
	{
		/*Rotate AntiClockwise*/
		GPIO_writePin (DC_MOTOR_PORT_ID,DC_MOTOR_PIN_1,LOGIC_HIGH);
    1bde:	82 e0       	ldi	r24, 0x02	; 2
    1be0:	64 e0       	ldi	r22, 0x04	; 4
    1be2:	41 e0       	ldi	r20, 0x01	; 1
    1be4:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <GPIO_writePin>
		GPIO_writePin (DC_MOTOR_PORT_ID,DC_MOTOR_PIN_2,LOGIC_LOW);
    1be8:	82 e0       	ldi	r24, 0x02	; 2
    1bea:	65 e0       	ldi	r22, 0x05	; 5
    1bec:	40 e0       	ldi	r20, 0x00	; 0
    1bee:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <GPIO_writePin>
	}
}
    1bf2:	0f 90       	pop	r0
    1bf4:	cf 91       	pop	r28
    1bf6:	df 91       	pop	r29
    1bf8:	08 95       	ret

00001bfa <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1bfa:	df 93       	push	r29
    1bfc:	cf 93       	push	r28
    1bfe:	00 d0       	rcall	.+0      	; 0x1c00 <EEPROM_writeByte+0x6>
    1c00:	00 d0       	rcall	.+0      	; 0x1c02 <EEPROM_writeByte+0x8>
    1c02:	cd b7       	in	r28, 0x3d	; 61
    1c04:	de b7       	in	r29, 0x3e	; 62
    1c06:	9a 83       	std	Y+2, r25	; 0x02
    1c08:	89 83       	std	Y+1, r24	; 0x01
    1c0a:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1c0c:	0e 94 20 13 	call	0x2640	; 0x2640 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1c10:	0e 94 78 13 	call	0x26f0	; 0x26f0 <TWI_getStatus>
    1c14:	88 30       	cpi	r24, 0x08	; 8
    1c16:	11 f0       	breq	.+4      	; 0x1c1c <EEPROM_writeByte+0x22>
        return ERROR;
    1c18:	1c 82       	std	Y+4, r1	; 0x04
    1c1a:	28 c0       	rjmp	.+80     	; 0x1c6c <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
    1c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c20:	80 70       	andi	r24, 0x00	; 0
    1c22:	97 70       	andi	r25, 0x07	; 7
    1c24:	88 0f       	add	r24, r24
    1c26:	89 2f       	mov	r24, r25
    1c28:	88 1f       	adc	r24, r24
    1c2a:	99 0b       	sbc	r25, r25
    1c2c:	91 95       	neg	r25
    1c2e:	80 6a       	ori	r24, 0xA0	; 160
    1c30:	0e 94 3b 13 	call	0x2676	; 0x2676 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1c34:	0e 94 78 13 	call	0x26f0	; 0x26f0 <TWI_getStatus>
    1c38:	88 31       	cpi	r24, 0x18	; 24
    1c3a:	11 f0       	breq	.+4      	; 0x1c40 <EEPROM_writeByte+0x46>
        return ERROR; 
    1c3c:	1c 82       	std	Y+4, r1	; 0x04
    1c3e:	16 c0       	rjmp	.+44     	; 0x1c6c <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1c40:	89 81       	ldd	r24, Y+1	; 0x01
    1c42:	0e 94 3b 13 	call	0x2676	; 0x2676 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1c46:	0e 94 78 13 	call	0x26f0	; 0x26f0 <TWI_getStatus>
    1c4a:	88 32       	cpi	r24, 0x28	; 40
    1c4c:	11 f0       	breq	.+4      	; 0x1c52 <EEPROM_writeByte+0x58>
        return ERROR;
    1c4e:	1c 82       	std	Y+4, r1	; 0x04
    1c50:	0d c0       	rjmp	.+26     	; 0x1c6c <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1c52:	8b 81       	ldd	r24, Y+3	; 0x03
    1c54:	0e 94 3b 13 	call	0x2676	; 0x2676 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1c58:	0e 94 78 13 	call	0x26f0	; 0x26f0 <TWI_getStatus>
    1c5c:	88 32       	cpi	r24, 0x28	; 40
    1c5e:	11 f0       	breq	.+4      	; 0x1c64 <EEPROM_writeByte+0x6a>
        return ERROR;
    1c60:	1c 82       	std	Y+4, r1	; 0x04
    1c62:	04 c0       	rjmp	.+8      	; 0x1c6c <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1c64:	0e 94 30 13 	call	0x2660	; 0x2660 <TWI_stop>
	
    return SUCCESS;
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	8c 83       	std	Y+4, r24	; 0x04
    1c6c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1c6e:	0f 90       	pop	r0
    1c70:	0f 90       	pop	r0
    1c72:	0f 90       	pop	r0
    1c74:	0f 90       	pop	r0
    1c76:	cf 91       	pop	r28
    1c78:	df 91       	pop	r29
    1c7a:	08 95       	ret

00001c7c <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1c7c:	df 93       	push	r29
    1c7e:	cf 93       	push	r28
    1c80:	00 d0       	rcall	.+0      	; 0x1c82 <EEPROM_readByte+0x6>
    1c82:	00 d0       	rcall	.+0      	; 0x1c84 <EEPROM_readByte+0x8>
    1c84:	0f 92       	push	r0
    1c86:	cd b7       	in	r28, 0x3d	; 61
    1c88:	de b7       	in	r29, 0x3e	; 62
    1c8a:	9a 83       	std	Y+2, r25	; 0x02
    1c8c:	89 83       	std	Y+1, r24	; 0x01
    1c8e:	7c 83       	std	Y+4, r23	; 0x04
    1c90:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1c92:	0e 94 20 13 	call	0x2640	; 0x2640 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1c96:	0e 94 78 13 	call	0x26f0	; 0x26f0 <TWI_getStatus>
    1c9a:	88 30       	cpi	r24, 0x08	; 8
    1c9c:	11 f0       	breq	.+4      	; 0x1ca2 <EEPROM_readByte+0x26>
        return ERROR;
    1c9e:	1d 82       	std	Y+5, r1	; 0x05
    1ca0:	44 c0       	rjmp	.+136    	; 0x1d2a <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1ca2:	89 81       	ldd	r24, Y+1	; 0x01
    1ca4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca6:	80 70       	andi	r24, 0x00	; 0
    1ca8:	97 70       	andi	r25, 0x07	; 7
    1caa:	88 0f       	add	r24, r24
    1cac:	89 2f       	mov	r24, r25
    1cae:	88 1f       	adc	r24, r24
    1cb0:	99 0b       	sbc	r25, r25
    1cb2:	91 95       	neg	r25
    1cb4:	80 6a       	ori	r24, 0xA0	; 160
    1cb6:	0e 94 3b 13 	call	0x2676	; 0x2676 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1cba:	0e 94 78 13 	call	0x26f0	; 0x26f0 <TWI_getStatus>
    1cbe:	88 31       	cpi	r24, 0x18	; 24
    1cc0:	11 f0       	breq	.+4      	; 0x1cc6 <EEPROM_readByte+0x4a>
        return ERROR;
    1cc2:	1d 82       	std	Y+5, r1	; 0x05
    1cc4:	32 c0       	rjmp	.+100    	; 0x1d2a <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1cc6:	89 81       	ldd	r24, Y+1	; 0x01
    1cc8:	0e 94 3b 13 	call	0x2676	; 0x2676 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1ccc:	0e 94 78 13 	call	0x26f0	; 0x26f0 <TWI_getStatus>
    1cd0:	88 32       	cpi	r24, 0x28	; 40
    1cd2:	11 f0       	breq	.+4      	; 0x1cd8 <EEPROM_readByte+0x5c>
        return ERROR;
    1cd4:	1d 82       	std	Y+5, r1	; 0x05
    1cd6:	29 c0       	rjmp	.+82     	; 0x1d2a <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1cd8:	0e 94 20 13 	call	0x2640	; 0x2640 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1cdc:	0e 94 78 13 	call	0x26f0	; 0x26f0 <TWI_getStatus>
    1ce0:	80 31       	cpi	r24, 0x10	; 16
    1ce2:	11 f0       	breq	.+4      	; 0x1ce8 <EEPROM_readByte+0x6c>
        return ERROR;
    1ce4:	1d 82       	std	Y+5, r1	; 0x05
    1ce6:	21 c0       	rjmp	.+66     	; 0x1d2a <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1ce8:	89 81       	ldd	r24, Y+1	; 0x01
    1cea:	9a 81       	ldd	r25, Y+2	; 0x02
    1cec:	80 70       	andi	r24, 0x00	; 0
    1cee:	97 70       	andi	r25, 0x07	; 7
    1cf0:	88 0f       	add	r24, r24
    1cf2:	89 2f       	mov	r24, r25
    1cf4:	88 1f       	adc	r24, r24
    1cf6:	99 0b       	sbc	r25, r25
    1cf8:	91 95       	neg	r25
    1cfa:	81 6a       	ori	r24, 0xA1	; 161
    1cfc:	0e 94 3b 13 	call	0x2676	; 0x2676 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1d00:	0e 94 78 13 	call	0x26f0	; 0x26f0 <TWI_getStatus>
    1d04:	80 34       	cpi	r24, 0x40	; 64
    1d06:	11 f0       	breq	.+4      	; 0x1d0c <EEPROM_readByte+0x90>
        return ERROR;
    1d08:	1d 82       	std	Y+5, r1	; 0x05
    1d0a:	0f c0       	rjmp	.+30     	; 0x1d2a <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1d0c:	0e 94 65 13 	call	0x26ca	; 0x26ca <TWI_readByteWithNACK>
    1d10:	eb 81       	ldd	r30, Y+3	; 0x03
    1d12:	fc 81       	ldd	r31, Y+4	; 0x04
    1d14:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1d16:	0e 94 78 13 	call	0x26f0	; 0x26f0 <TWI_getStatus>
    1d1a:	88 35       	cpi	r24, 0x58	; 88
    1d1c:	11 f0       	breq	.+4      	; 0x1d22 <EEPROM_readByte+0xa6>
        return ERROR;
    1d1e:	1d 82       	std	Y+5, r1	; 0x05
    1d20:	04 c0       	rjmp	.+8      	; 0x1d2a <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1d22:	0e 94 30 13 	call	0x2660	; 0x2660 <TWI_stop>

    return SUCCESS;
    1d26:	81 e0       	ldi	r24, 0x01	; 1
    1d28:	8d 83       	std	Y+5, r24	; 0x05
    1d2a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1d2c:	0f 90       	pop	r0
    1d2e:	0f 90       	pop	r0
    1d30:	0f 90       	pop	r0
    1d32:	0f 90       	pop	r0
    1d34:	0f 90       	pop	r0
    1d36:	cf 91       	pop	r28
    1d38:	df 91       	pop	r29
    1d3a:	08 95       	ret

00001d3c <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1d3c:	df 93       	push	r29
    1d3e:	cf 93       	push	r28
    1d40:	00 d0       	rcall	.+0      	; 0x1d42 <GPIO_setupPinDirection+0x6>
    1d42:	00 d0       	rcall	.+0      	; 0x1d44 <GPIO_setupPinDirection+0x8>
    1d44:	0f 92       	push	r0
    1d46:	cd b7       	in	r28, 0x3d	; 61
    1d48:	de b7       	in	r29, 0x3e	; 62
    1d4a:	89 83       	std	Y+1, r24	; 0x01
    1d4c:	6a 83       	std	Y+2, r22	; 0x02
    1d4e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1d50:	8a 81       	ldd	r24, Y+2	; 0x02
    1d52:	88 30       	cpi	r24, 0x08	; 8
    1d54:	08 f0       	brcs	.+2      	; 0x1d58 <GPIO_setupPinDirection+0x1c>
    1d56:	d5 c0       	rjmp	.+426    	; 0x1f02 <GPIO_setupPinDirection+0x1c6>
    1d58:	89 81       	ldd	r24, Y+1	; 0x01
    1d5a:	84 30       	cpi	r24, 0x04	; 4
    1d5c:	08 f0       	brcs	.+2      	; 0x1d60 <GPIO_setupPinDirection+0x24>
    1d5e:	d1 c0       	rjmp	.+418    	; 0x1f02 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1d60:	89 81       	ldd	r24, Y+1	; 0x01
    1d62:	28 2f       	mov	r18, r24
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	3d 83       	std	Y+5, r19	; 0x05
    1d68:	2c 83       	std	Y+4, r18	; 0x04
    1d6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d6c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d6e:	81 30       	cpi	r24, 0x01	; 1
    1d70:	91 05       	cpc	r25, r1
    1d72:	09 f4       	brne	.+2      	; 0x1d76 <GPIO_setupPinDirection+0x3a>
    1d74:	43 c0       	rjmp	.+134    	; 0x1dfc <GPIO_setupPinDirection+0xc0>
    1d76:	2c 81       	ldd	r18, Y+4	; 0x04
    1d78:	3d 81       	ldd	r19, Y+5	; 0x05
    1d7a:	22 30       	cpi	r18, 0x02	; 2
    1d7c:	31 05       	cpc	r19, r1
    1d7e:	2c f4       	brge	.+10     	; 0x1d8a <GPIO_setupPinDirection+0x4e>
    1d80:	8c 81       	ldd	r24, Y+4	; 0x04
    1d82:	9d 81       	ldd	r25, Y+5	; 0x05
    1d84:	00 97       	sbiw	r24, 0x00	; 0
    1d86:	71 f0       	breq	.+28     	; 0x1da4 <GPIO_setupPinDirection+0x68>
    1d88:	bc c0       	rjmp	.+376    	; 0x1f02 <GPIO_setupPinDirection+0x1c6>
    1d8a:	2c 81       	ldd	r18, Y+4	; 0x04
    1d8c:	3d 81       	ldd	r19, Y+5	; 0x05
    1d8e:	22 30       	cpi	r18, 0x02	; 2
    1d90:	31 05       	cpc	r19, r1
    1d92:	09 f4       	brne	.+2      	; 0x1d96 <GPIO_setupPinDirection+0x5a>
    1d94:	5f c0       	rjmp	.+190    	; 0x1e54 <GPIO_setupPinDirection+0x118>
    1d96:	8c 81       	ldd	r24, Y+4	; 0x04
    1d98:	9d 81       	ldd	r25, Y+5	; 0x05
    1d9a:	83 30       	cpi	r24, 0x03	; 3
    1d9c:	91 05       	cpc	r25, r1
    1d9e:	09 f4       	brne	.+2      	; 0x1da2 <GPIO_setupPinDirection+0x66>
    1da0:	85 c0       	rjmp	.+266    	; 0x1eac <GPIO_setupPinDirection+0x170>
    1da2:	af c0       	rjmp	.+350    	; 0x1f02 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1da4:	8b 81       	ldd	r24, Y+3	; 0x03
    1da6:	81 30       	cpi	r24, 0x01	; 1
    1da8:	a1 f4       	brne	.+40     	; 0x1dd2 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1daa:	aa e3       	ldi	r26, 0x3A	; 58
    1dac:	b0 e0       	ldi	r27, 0x00	; 0
    1dae:	ea e3       	ldi	r30, 0x3A	; 58
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	48 2f       	mov	r20, r24
    1db6:	8a 81       	ldd	r24, Y+2	; 0x02
    1db8:	28 2f       	mov	r18, r24
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	02 2e       	mov	r0, r18
    1dc2:	02 c0       	rjmp	.+4      	; 0x1dc8 <GPIO_setupPinDirection+0x8c>
    1dc4:	88 0f       	add	r24, r24
    1dc6:	99 1f       	adc	r25, r25
    1dc8:	0a 94       	dec	r0
    1dca:	e2 f7       	brpl	.-8      	; 0x1dc4 <GPIO_setupPinDirection+0x88>
    1dcc:	84 2b       	or	r24, r20
    1dce:	8c 93       	st	X, r24
    1dd0:	98 c0       	rjmp	.+304    	; 0x1f02 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1dd2:	aa e3       	ldi	r26, 0x3A	; 58
    1dd4:	b0 e0       	ldi	r27, 0x00	; 0
    1dd6:	ea e3       	ldi	r30, 0x3A	; 58
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z
    1ddc:	48 2f       	mov	r20, r24
    1dde:	8a 81       	ldd	r24, Y+2	; 0x02
    1de0:	28 2f       	mov	r18, r24
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	02 2e       	mov	r0, r18
    1dea:	02 c0       	rjmp	.+4      	; 0x1df0 <GPIO_setupPinDirection+0xb4>
    1dec:	88 0f       	add	r24, r24
    1dee:	99 1f       	adc	r25, r25
    1df0:	0a 94       	dec	r0
    1df2:	e2 f7       	brpl	.-8      	; 0x1dec <GPIO_setupPinDirection+0xb0>
    1df4:	80 95       	com	r24
    1df6:	84 23       	and	r24, r20
    1df8:	8c 93       	st	X, r24
    1dfa:	83 c0       	rjmp	.+262    	; 0x1f02 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfe:	81 30       	cpi	r24, 0x01	; 1
    1e00:	a1 f4       	brne	.+40     	; 0x1e2a <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1e02:	a7 e3       	ldi	r26, 0x37	; 55
    1e04:	b0 e0       	ldi	r27, 0x00	; 0
    1e06:	e7 e3       	ldi	r30, 0x37	; 55
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	80 81       	ld	r24, Z
    1e0c:	48 2f       	mov	r20, r24
    1e0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e10:	28 2f       	mov	r18, r24
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	02 2e       	mov	r0, r18
    1e1a:	02 c0       	rjmp	.+4      	; 0x1e20 <GPIO_setupPinDirection+0xe4>
    1e1c:	88 0f       	add	r24, r24
    1e1e:	99 1f       	adc	r25, r25
    1e20:	0a 94       	dec	r0
    1e22:	e2 f7       	brpl	.-8      	; 0x1e1c <GPIO_setupPinDirection+0xe0>
    1e24:	84 2b       	or	r24, r20
    1e26:	8c 93       	st	X, r24
    1e28:	6c c0       	rjmp	.+216    	; 0x1f02 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1e2a:	a7 e3       	ldi	r26, 0x37	; 55
    1e2c:	b0 e0       	ldi	r27, 0x00	; 0
    1e2e:	e7 e3       	ldi	r30, 0x37	; 55
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	80 81       	ld	r24, Z
    1e34:	48 2f       	mov	r20, r24
    1e36:	8a 81       	ldd	r24, Y+2	; 0x02
    1e38:	28 2f       	mov	r18, r24
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	02 2e       	mov	r0, r18
    1e42:	02 c0       	rjmp	.+4      	; 0x1e48 <GPIO_setupPinDirection+0x10c>
    1e44:	88 0f       	add	r24, r24
    1e46:	99 1f       	adc	r25, r25
    1e48:	0a 94       	dec	r0
    1e4a:	e2 f7       	brpl	.-8      	; 0x1e44 <GPIO_setupPinDirection+0x108>
    1e4c:	80 95       	com	r24
    1e4e:	84 23       	and	r24, r20
    1e50:	8c 93       	st	X, r24
    1e52:	57 c0       	rjmp	.+174    	; 0x1f02 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1e54:	8b 81       	ldd	r24, Y+3	; 0x03
    1e56:	81 30       	cpi	r24, 0x01	; 1
    1e58:	a1 f4       	brne	.+40     	; 0x1e82 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1e5a:	a4 e3       	ldi	r26, 0x34	; 52
    1e5c:	b0 e0       	ldi	r27, 0x00	; 0
    1e5e:	e4 e3       	ldi	r30, 0x34	; 52
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	80 81       	ld	r24, Z
    1e64:	48 2f       	mov	r20, r24
    1e66:	8a 81       	ldd	r24, Y+2	; 0x02
    1e68:	28 2f       	mov	r18, r24
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	02 2e       	mov	r0, r18
    1e72:	02 c0       	rjmp	.+4      	; 0x1e78 <GPIO_setupPinDirection+0x13c>
    1e74:	88 0f       	add	r24, r24
    1e76:	99 1f       	adc	r25, r25
    1e78:	0a 94       	dec	r0
    1e7a:	e2 f7       	brpl	.-8      	; 0x1e74 <GPIO_setupPinDirection+0x138>
    1e7c:	84 2b       	or	r24, r20
    1e7e:	8c 93       	st	X, r24
    1e80:	40 c0       	rjmp	.+128    	; 0x1f02 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1e82:	a4 e3       	ldi	r26, 0x34	; 52
    1e84:	b0 e0       	ldi	r27, 0x00	; 0
    1e86:	e4 e3       	ldi	r30, 0x34	; 52
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	48 2f       	mov	r20, r24
    1e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e90:	28 2f       	mov	r18, r24
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	02 2e       	mov	r0, r18
    1e9a:	02 c0       	rjmp	.+4      	; 0x1ea0 <GPIO_setupPinDirection+0x164>
    1e9c:	88 0f       	add	r24, r24
    1e9e:	99 1f       	adc	r25, r25
    1ea0:	0a 94       	dec	r0
    1ea2:	e2 f7       	brpl	.-8      	; 0x1e9c <GPIO_setupPinDirection+0x160>
    1ea4:	80 95       	com	r24
    1ea6:	84 23       	and	r24, r20
    1ea8:	8c 93       	st	X, r24
    1eaa:	2b c0       	rjmp	.+86     	; 0x1f02 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1eac:	8b 81       	ldd	r24, Y+3	; 0x03
    1eae:	81 30       	cpi	r24, 0x01	; 1
    1eb0:	a1 f4       	brne	.+40     	; 0x1eda <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1eb2:	a1 e3       	ldi	r26, 0x31	; 49
    1eb4:	b0 e0       	ldi	r27, 0x00	; 0
    1eb6:	e1 e3       	ldi	r30, 0x31	; 49
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	80 81       	ld	r24, Z
    1ebc:	48 2f       	mov	r20, r24
    1ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec0:	28 2f       	mov	r18, r24
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	02 2e       	mov	r0, r18
    1eca:	02 c0       	rjmp	.+4      	; 0x1ed0 <GPIO_setupPinDirection+0x194>
    1ecc:	88 0f       	add	r24, r24
    1ece:	99 1f       	adc	r25, r25
    1ed0:	0a 94       	dec	r0
    1ed2:	e2 f7       	brpl	.-8      	; 0x1ecc <GPIO_setupPinDirection+0x190>
    1ed4:	84 2b       	or	r24, r20
    1ed6:	8c 93       	st	X, r24
    1ed8:	14 c0       	rjmp	.+40     	; 0x1f02 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1eda:	a1 e3       	ldi	r26, 0x31	; 49
    1edc:	b0 e0       	ldi	r27, 0x00	; 0
    1ede:	e1 e3       	ldi	r30, 0x31	; 49
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	80 81       	ld	r24, Z
    1ee4:	48 2f       	mov	r20, r24
    1ee6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee8:	28 2f       	mov	r18, r24
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	02 2e       	mov	r0, r18
    1ef2:	02 c0       	rjmp	.+4      	; 0x1ef8 <GPIO_setupPinDirection+0x1bc>
    1ef4:	88 0f       	add	r24, r24
    1ef6:	99 1f       	adc	r25, r25
    1ef8:	0a 94       	dec	r0
    1efa:	e2 f7       	brpl	.-8      	; 0x1ef4 <GPIO_setupPinDirection+0x1b8>
    1efc:	80 95       	com	r24
    1efe:	84 23       	and	r24, r20
    1f00:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	0f 90       	pop	r0
    1f08:	0f 90       	pop	r0
    1f0a:	0f 90       	pop	r0
    1f0c:	cf 91       	pop	r28
    1f0e:	df 91       	pop	r29
    1f10:	08 95       	ret

00001f12 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1f12:	df 93       	push	r29
    1f14:	cf 93       	push	r28
    1f16:	00 d0       	rcall	.+0      	; 0x1f18 <GPIO_writePin+0x6>
    1f18:	00 d0       	rcall	.+0      	; 0x1f1a <GPIO_writePin+0x8>
    1f1a:	0f 92       	push	r0
    1f1c:	cd b7       	in	r28, 0x3d	; 61
    1f1e:	de b7       	in	r29, 0x3e	; 62
    1f20:	89 83       	std	Y+1, r24	; 0x01
    1f22:	6a 83       	std	Y+2, r22	; 0x02
    1f24:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1f26:	8a 81       	ldd	r24, Y+2	; 0x02
    1f28:	88 30       	cpi	r24, 0x08	; 8
    1f2a:	08 f0       	brcs	.+2      	; 0x1f2e <GPIO_writePin+0x1c>
    1f2c:	d5 c0       	rjmp	.+426    	; 0x20d8 <GPIO_writePin+0x1c6>
    1f2e:	89 81       	ldd	r24, Y+1	; 0x01
    1f30:	84 30       	cpi	r24, 0x04	; 4
    1f32:	08 f0       	brcs	.+2      	; 0x1f36 <GPIO_writePin+0x24>
    1f34:	d1 c0       	rjmp	.+418    	; 0x20d8 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1f36:	89 81       	ldd	r24, Y+1	; 0x01
    1f38:	28 2f       	mov	r18, r24
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	3d 83       	std	Y+5, r19	; 0x05
    1f3e:	2c 83       	std	Y+4, r18	; 0x04
    1f40:	8c 81       	ldd	r24, Y+4	; 0x04
    1f42:	9d 81       	ldd	r25, Y+5	; 0x05
    1f44:	81 30       	cpi	r24, 0x01	; 1
    1f46:	91 05       	cpc	r25, r1
    1f48:	09 f4       	brne	.+2      	; 0x1f4c <GPIO_writePin+0x3a>
    1f4a:	43 c0       	rjmp	.+134    	; 0x1fd2 <GPIO_writePin+0xc0>
    1f4c:	2c 81       	ldd	r18, Y+4	; 0x04
    1f4e:	3d 81       	ldd	r19, Y+5	; 0x05
    1f50:	22 30       	cpi	r18, 0x02	; 2
    1f52:	31 05       	cpc	r19, r1
    1f54:	2c f4       	brge	.+10     	; 0x1f60 <GPIO_writePin+0x4e>
    1f56:	8c 81       	ldd	r24, Y+4	; 0x04
    1f58:	9d 81       	ldd	r25, Y+5	; 0x05
    1f5a:	00 97       	sbiw	r24, 0x00	; 0
    1f5c:	71 f0       	breq	.+28     	; 0x1f7a <GPIO_writePin+0x68>
    1f5e:	bc c0       	rjmp	.+376    	; 0x20d8 <GPIO_writePin+0x1c6>
    1f60:	2c 81       	ldd	r18, Y+4	; 0x04
    1f62:	3d 81       	ldd	r19, Y+5	; 0x05
    1f64:	22 30       	cpi	r18, 0x02	; 2
    1f66:	31 05       	cpc	r19, r1
    1f68:	09 f4       	brne	.+2      	; 0x1f6c <GPIO_writePin+0x5a>
    1f6a:	5f c0       	rjmp	.+190    	; 0x202a <GPIO_writePin+0x118>
    1f6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f70:	83 30       	cpi	r24, 0x03	; 3
    1f72:	91 05       	cpc	r25, r1
    1f74:	09 f4       	brne	.+2      	; 0x1f78 <GPIO_writePin+0x66>
    1f76:	85 c0       	rjmp	.+266    	; 0x2082 <GPIO_writePin+0x170>
    1f78:	af c0       	rjmp	.+350    	; 0x20d8 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1f7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7c:	81 30       	cpi	r24, 0x01	; 1
    1f7e:	a1 f4       	brne	.+40     	; 0x1fa8 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1f80:	ab e3       	ldi	r26, 0x3B	; 59
    1f82:	b0 e0       	ldi	r27, 0x00	; 0
    1f84:	eb e3       	ldi	r30, 0x3B	; 59
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	80 81       	ld	r24, Z
    1f8a:	48 2f       	mov	r20, r24
    1f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8e:	28 2f       	mov	r18, r24
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	02 2e       	mov	r0, r18
    1f98:	02 c0       	rjmp	.+4      	; 0x1f9e <GPIO_writePin+0x8c>
    1f9a:	88 0f       	add	r24, r24
    1f9c:	99 1f       	adc	r25, r25
    1f9e:	0a 94       	dec	r0
    1fa0:	e2 f7       	brpl	.-8      	; 0x1f9a <GPIO_writePin+0x88>
    1fa2:	84 2b       	or	r24, r20
    1fa4:	8c 93       	st	X, r24
    1fa6:	98 c0       	rjmp	.+304    	; 0x20d8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1fa8:	ab e3       	ldi	r26, 0x3B	; 59
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	eb e3       	ldi	r30, 0x3B	; 59
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 81       	ld	r24, Z
    1fb2:	48 2f       	mov	r20, r24
    1fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb6:	28 2f       	mov	r18, r24
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	81 e0       	ldi	r24, 0x01	; 1
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	02 2e       	mov	r0, r18
    1fc0:	02 c0       	rjmp	.+4      	; 0x1fc6 <GPIO_writePin+0xb4>
    1fc2:	88 0f       	add	r24, r24
    1fc4:	99 1f       	adc	r25, r25
    1fc6:	0a 94       	dec	r0
    1fc8:	e2 f7       	brpl	.-8      	; 0x1fc2 <GPIO_writePin+0xb0>
    1fca:	80 95       	com	r24
    1fcc:	84 23       	and	r24, r20
    1fce:	8c 93       	st	X, r24
    1fd0:	83 c0       	rjmp	.+262    	; 0x20d8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1fd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd4:	81 30       	cpi	r24, 0x01	; 1
    1fd6:	a1 f4       	brne	.+40     	; 0x2000 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1fd8:	a8 e3       	ldi	r26, 0x38	; 56
    1fda:	b0 e0       	ldi	r27, 0x00	; 0
    1fdc:	e8 e3       	ldi	r30, 0x38	; 56
    1fde:	f0 e0       	ldi	r31, 0x00	; 0
    1fe0:	80 81       	ld	r24, Z
    1fe2:	48 2f       	mov	r20, r24
    1fe4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe6:	28 2f       	mov	r18, r24
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	02 2e       	mov	r0, r18
    1ff0:	02 c0       	rjmp	.+4      	; 0x1ff6 <GPIO_writePin+0xe4>
    1ff2:	88 0f       	add	r24, r24
    1ff4:	99 1f       	adc	r25, r25
    1ff6:	0a 94       	dec	r0
    1ff8:	e2 f7       	brpl	.-8      	; 0x1ff2 <GPIO_writePin+0xe0>
    1ffa:	84 2b       	or	r24, r20
    1ffc:	8c 93       	st	X, r24
    1ffe:	6c c0       	rjmp	.+216    	; 0x20d8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    2000:	a8 e3       	ldi	r26, 0x38	; 56
    2002:	b0 e0       	ldi	r27, 0x00	; 0
    2004:	e8 e3       	ldi	r30, 0x38	; 56
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	80 81       	ld	r24, Z
    200a:	48 2f       	mov	r20, r24
    200c:	8a 81       	ldd	r24, Y+2	; 0x02
    200e:	28 2f       	mov	r18, r24
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	02 2e       	mov	r0, r18
    2018:	02 c0       	rjmp	.+4      	; 0x201e <GPIO_writePin+0x10c>
    201a:	88 0f       	add	r24, r24
    201c:	99 1f       	adc	r25, r25
    201e:	0a 94       	dec	r0
    2020:	e2 f7       	brpl	.-8      	; 0x201a <GPIO_writePin+0x108>
    2022:	80 95       	com	r24
    2024:	84 23       	and	r24, r20
    2026:	8c 93       	st	X, r24
    2028:	57 c0       	rjmp	.+174    	; 0x20d8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    202a:	8b 81       	ldd	r24, Y+3	; 0x03
    202c:	81 30       	cpi	r24, 0x01	; 1
    202e:	a1 f4       	brne	.+40     	; 0x2058 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    2030:	a5 e3       	ldi	r26, 0x35	; 53
    2032:	b0 e0       	ldi	r27, 0x00	; 0
    2034:	e5 e3       	ldi	r30, 0x35	; 53
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	80 81       	ld	r24, Z
    203a:	48 2f       	mov	r20, r24
    203c:	8a 81       	ldd	r24, Y+2	; 0x02
    203e:	28 2f       	mov	r18, r24
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	81 e0       	ldi	r24, 0x01	; 1
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	02 2e       	mov	r0, r18
    2048:	02 c0       	rjmp	.+4      	; 0x204e <GPIO_writePin+0x13c>
    204a:	88 0f       	add	r24, r24
    204c:	99 1f       	adc	r25, r25
    204e:	0a 94       	dec	r0
    2050:	e2 f7       	brpl	.-8      	; 0x204a <GPIO_writePin+0x138>
    2052:	84 2b       	or	r24, r20
    2054:	8c 93       	st	X, r24
    2056:	40 c0       	rjmp	.+128    	; 0x20d8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2058:	a5 e3       	ldi	r26, 0x35	; 53
    205a:	b0 e0       	ldi	r27, 0x00	; 0
    205c:	e5 e3       	ldi	r30, 0x35	; 53
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	80 81       	ld	r24, Z
    2062:	48 2f       	mov	r20, r24
    2064:	8a 81       	ldd	r24, Y+2	; 0x02
    2066:	28 2f       	mov	r18, r24
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	02 2e       	mov	r0, r18
    2070:	02 c0       	rjmp	.+4      	; 0x2076 <GPIO_writePin+0x164>
    2072:	88 0f       	add	r24, r24
    2074:	99 1f       	adc	r25, r25
    2076:	0a 94       	dec	r0
    2078:	e2 f7       	brpl	.-8      	; 0x2072 <GPIO_writePin+0x160>
    207a:	80 95       	com	r24
    207c:	84 23       	and	r24, r20
    207e:	8c 93       	st	X, r24
    2080:	2b c0       	rjmp	.+86     	; 0x20d8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    2082:	8b 81       	ldd	r24, Y+3	; 0x03
    2084:	81 30       	cpi	r24, 0x01	; 1
    2086:	a1 f4       	brne	.+40     	; 0x20b0 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    2088:	a2 e3       	ldi	r26, 0x32	; 50
    208a:	b0 e0       	ldi	r27, 0x00	; 0
    208c:	e2 e3       	ldi	r30, 0x32	; 50
    208e:	f0 e0       	ldi	r31, 0x00	; 0
    2090:	80 81       	ld	r24, Z
    2092:	48 2f       	mov	r20, r24
    2094:	8a 81       	ldd	r24, Y+2	; 0x02
    2096:	28 2f       	mov	r18, r24
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	81 e0       	ldi	r24, 0x01	; 1
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	02 2e       	mov	r0, r18
    20a0:	02 c0       	rjmp	.+4      	; 0x20a6 <GPIO_writePin+0x194>
    20a2:	88 0f       	add	r24, r24
    20a4:	99 1f       	adc	r25, r25
    20a6:	0a 94       	dec	r0
    20a8:	e2 f7       	brpl	.-8      	; 0x20a2 <GPIO_writePin+0x190>
    20aa:	84 2b       	or	r24, r20
    20ac:	8c 93       	st	X, r24
    20ae:	14 c0       	rjmp	.+40     	; 0x20d8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    20b0:	a2 e3       	ldi	r26, 0x32	; 50
    20b2:	b0 e0       	ldi	r27, 0x00	; 0
    20b4:	e2 e3       	ldi	r30, 0x32	; 50
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	80 81       	ld	r24, Z
    20ba:	48 2f       	mov	r20, r24
    20bc:	8a 81       	ldd	r24, Y+2	; 0x02
    20be:	28 2f       	mov	r18, r24
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	02 2e       	mov	r0, r18
    20c8:	02 c0       	rjmp	.+4      	; 0x20ce <GPIO_writePin+0x1bc>
    20ca:	88 0f       	add	r24, r24
    20cc:	99 1f       	adc	r25, r25
    20ce:	0a 94       	dec	r0
    20d0:	e2 f7       	brpl	.-8      	; 0x20ca <GPIO_writePin+0x1b8>
    20d2:	80 95       	com	r24
    20d4:	84 23       	and	r24, r20
    20d6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    20d8:	0f 90       	pop	r0
    20da:	0f 90       	pop	r0
    20dc:	0f 90       	pop	r0
    20de:	0f 90       	pop	r0
    20e0:	0f 90       	pop	r0
    20e2:	cf 91       	pop	r28
    20e4:	df 91       	pop	r29
    20e6:	08 95       	ret

000020e8 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    20e8:	df 93       	push	r29
    20ea:	cf 93       	push	r28
    20ec:	00 d0       	rcall	.+0      	; 0x20ee <GPIO_readPin+0x6>
    20ee:	00 d0       	rcall	.+0      	; 0x20f0 <GPIO_readPin+0x8>
    20f0:	0f 92       	push	r0
    20f2:	cd b7       	in	r28, 0x3d	; 61
    20f4:	de b7       	in	r29, 0x3e	; 62
    20f6:	8a 83       	std	Y+2, r24	; 0x02
    20f8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    20fa:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    20fc:	8b 81       	ldd	r24, Y+3	; 0x03
    20fe:	88 30       	cpi	r24, 0x08	; 8
    2100:	08 f0       	brcs	.+2      	; 0x2104 <GPIO_readPin+0x1c>
    2102:	84 c0       	rjmp	.+264    	; 0x220c <GPIO_readPin+0x124>
    2104:	8a 81       	ldd	r24, Y+2	; 0x02
    2106:	84 30       	cpi	r24, 0x04	; 4
    2108:	08 f0       	brcs	.+2      	; 0x210c <GPIO_readPin+0x24>
    210a:	80 c0       	rjmp	.+256    	; 0x220c <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    210c:	8a 81       	ldd	r24, Y+2	; 0x02
    210e:	28 2f       	mov	r18, r24
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	3d 83       	std	Y+5, r19	; 0x05
    2114:	2c 83       	std	Y+4, r18	; 0x04
    2116:	4c 81       	ldd	r20, Y+4	; 0x04
    2118:	5d 81       	ldd	r21, Y+5	; 0x05
    211a:	41 30       	cpi	r20, 0x01	; 1
    211c:	51 05       	cpc	r21, r1
    211e:	79 f1       	breq	.+94     	; 0x217e <GPIO_readPin+0x96>
    2120:	8c 81       	ldd	r24, Y+4	; 0x04
    2122:	9d 81       	ldd	r25, Y+5	; 0x05
    2124:	82 30       	cpi	r24, 0x02	; 2
    2126:	91 05       	cpc	r25, r1
    2128:	34 f4       	brge	.+12     	; 0x2136 <GPIO_readPin+0x4e>
    212a:	2c 81       	ldd	r18, Y+4	; 0x04
    212c:	3d 81       	ldd	r19, Y+5	; 0x05
    212e:	21 15       	cp	r18, r1
    2130:	31 05       	cpc	r19, r1
    2132:	69 f0       	breq	.+26     	; 0x214e <GPIO_readPin+0x66>
    2134:	6b c0       	rjmp	.+214    	; 0x220c <GPIO_readPin+0x124>
    2136:	4c 81       	ldd	r20, Y+4	; 0x04
    2138:	5d 81       	ldd	r21, Y+5	; 0x05
    213a:	42 30       	cpi	r20, 0x02	; 2
    213c:	51 05       	cpc	r21, r1
    213e:	b9 f1       	breq	.+110    	; 0x21ae <GPIO_readPin+0xc6>
    2140:	8c 81       	ldd	r24, Y+4	; 0x04
    2142:	9d 81       	ldd	r25, Y+5	; 0x05
    2144:	83 30       	cpi	r24, 0x03	; 3
    2146:	91 05       	cpc	r25, r1
    2148:	09 f4       	brne	.+2      	; 0x214c <GPIO_readPin+0x64>
    214a:	49 c0       	rjmp	.+146    	; 0x21de <GPIO_readPin+0xf6>
    214c:	5f c0       	rjmp	.+190    	; 0x220c <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    214e:	e9 e3       	ldi	r30, 0x39	; 57
    2150:	f0 e0       	ldi	r31, 0x00	; 0
    2152:	80 81       	ld	r24, Z
    2154:	28 2f       	mov	r18, r24
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	8b 81       	ldd	r24, Y+3	; 0x03
    215a:	88 2f       	mov	r24, r24
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	a9 01       	movw	r20, r18
    2160:	02 c0       	rjmp	.+4      	; 0x2166 <GPIO_readPin+0x7e>
    2162:	55 95       	asr	r21
    2164:	47 95       	ror	r20
    2166:	8a 95       	dec	r24
    2168:	e2 f7       	brpl	.-8      	; 0x2162 <GPIO_readPin+0x7a>
    216a:	ca 01       	movw	r24, r20
    216c:	81 70       	andi	r24, 0x01	; 1
    216e:	90 70       	andi	r25, 0x00	; 0
    2170:	88 23       	and	r24, r24
    2172:	19 f0       	breq	.+6      	; 0x217a <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    2174:	81 e0       	ldi	r24, 0x01	; 1
    2176:	89 83       	std	Y+1, r24	; 0x01
    2178:	49 c0       	rjmp	.+146    	; 0x220c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    217a:	19 82       	std	Y+1, r1	; 0x01
    217c:	47 c0       	rjmp	.+142    	; 0x220c <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    217e:	e6 e3       	ldi	r30, 0x36	; 54
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	80 81       	ld	r24, Z
    2184:	28 2f       	mov	r18, r24
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	8b 81       	ldd	r24, Y+3	; 0x03
    218a:	88 2f       	mov	r24, r24
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	a9 01       	movw	r20, r18
    2190:	02 c0       	rjmp	.+4      	; 0x2196 <GPIO_readPin+0xae>
    2192:	55 95       	asr	r21
    2194:	47 95       	ror	r20
    2196:	8a 95       	dec	r24
    2198:	e2 f7       	brpl	.-8      	; 0x2192 <GPIO_readPin+0xaa>
    219a:	ca 01       	movw	r24, r20
    219c:	81 70       	andi	r24, 0x01	; 1
    219e:	90 70       	andi	r25, 0x00	; 0
    21a0:	88 23       	and	r24, r24
    21a2:	19 f0       	breq	.+6      	; 0x21aa <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    21a4:	81 e0       	ldi	r24, 0x01	; 1
    21a6:	89 83       	std	Y+1, r24	; 0x01
    21a8:	31 c0       	rjmp	.+98     	; 0x220c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    21aa:	19 82       	std	Y+1, r1	; 0x01
    21ac:	2f c0       	rjmp	.+94     	; 0x220c <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    21ae:	e3 e3       	ldi	r30, 0x33	; 51
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	80 81       	ld	r24, Z
    21b4:	28 2f       	mov	r18, r24
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ba:	88 2f       	mov	r24, r24
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	a9 01       	movw	r20, r18
    21c0:	02 c0       	rjmp	.+4      	; 0x21c6 <GPIO_readPin+0xde>
    21c2:	55 95       	asr	r21
    21c4:	47 95       	ror	r20
    21c6:	8a 95       	dec	r24
    21c8:	e2 f7       	brpl	.-8      	; 0x21c2 <GPIO_readPin+0xda>
    21ca:	ca 01       	movw	r24, r20
    21cc:	81 70       	andi	r24, 0x01	; 1
    21ce:	90 70       	andi	r25, 0x00	; 0
    21d0:	88 23       	and	r24, r24
    21d2:	19 f0       	breq	.+6      	; 0x21da <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	89 83       	std	Y+1, r24	; 0x01
    21d8:	19 c0       	rjmp	.+50     	; 0x220c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    21da:	19 82       	std	Y+1, r1	; 0x01
    21dc:	17 c0       	rjmp	.+46     	; 0x220c <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    21de:	e0 e3       	ldi	r30, 0x30	; 48
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	80 81       	ld	r24, Z
    21e4:	28 2f       	mov	r18, r24
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ea:	88 2f       	mov	r24, r24
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	a9 01       	movw	r20, r18
    21f0:	02 c0       	rjmp	.+4      	; 0x21f6 <GPIO_readPin+0x10e>
    21f2:	55 95       	asr	r21
    21f4:	47 95       	ror	r20
    21f6:	8a 95       	dec	r24
    21f8:	e2 f7       	brpl	.-8      	; 0x21f2 <GPIO_readPin+0x10a>
    21fa:	ca 01       	movw	r24, r20
    21fc:	81 70       	andi	r24, 0x01	; 1
    21fe:	90 70       	andi	r25, 0x00	; 0
    2200:	88 23       	and	r24, r24
    2202:	19 f0       	breq	.+6      	; 0x220a <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2204:	81 e0       	ldi	r24, 0x01	; 1
    2206:	89 83       	std	Y+1, r24	; 0x01
    2208:	01 c0       	rjmp	.+2      	; 0x220c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    220a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    220c:	89 81       	ldd	r24, Y+1	; 0x01
}
    220e:	0f 90       	pop	r0
    2210:	0f 90       	pop	r0
    2212:	0f 90       	pop	r0
    2214:	0f 90       	pop	r0
    2216:	0f 90       	pop	r0
    2218:	cf 91       	pop	r28
    221a:	df 91       	pop	r29
    221c:	08 95       	ret

0000221e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    221e:	df 93       	push	r29
    2220:	cf 93       	push	r28
    2222:	00 d0       	rcall	.+0      	; 0x2224 <GPIO_setupPortDirection+0x6>
    2224:	00 d0       	rcall	.+0      	; 0x2226 <GPIO_setupPortDirection+0x8>
    2226:	cd b7       	in	r28, 0x3d	; 61
    2228:	de b7       	in	r29, 0x3e	; 62
    222a:	89 83       	std	Y+1, r24	; 0x01
    222c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    222e:	89 81       	ldd	r24, Y+1	; 0x01
    2230:	84 30       	cpi	r24, 0x04	; 4
    2232:	90 f5       	brcc	.+100    	; 0x2298 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2234:	89 81       	ldd	r24, Y+1	; 0x01
    2236:	28 2f       	mov	r18, r24
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	3c 83       	std	Y+4, r19	; 0x04
    223c:	2b 83       	std	Y+3, r18	; 0x03
    223e:	8b 81       	ldd	r24, Y+3	; 0x03
    2240:	9c 81       	ldd	r25, Y+4	; 0x04
    2242:	81 30       	cpi	r24, 0x01	; 1
    2244:	91 05       	cpc	r25, r1
    2246:	d1 f0       	breq	.+52     	; 0x227c <GPIO_setupPortDirection+0x5e>
    2248:	2b 81       	ldd	r18, Y+3	; 0x03
    224a:	3c 81       	ldd	r19, Y+4	; 0x04
    224c:	22 30       	cpi	r18, 0x02	; 2
    224e:	31 05       	cpc	r19, r1
    2250:	2c f4       	brge	.+10     	; 0x225c <GPIO_setupPortDirection+0x3e>
    2252:	8b 81       	ldd	r24, Y+3	; 0x03
    2254:	9c 81       	ldd	r25, Y+4	; 0x04
    2256:	00 97       	sbiw	r24, 0x00	; 0
    2258:	61 f0       	breq	.+24     	; 0x2272 <GPIO_setupPortDirection+0x54>
    225a:	1e c0       	rjmp	.+60     	; 0x2298 <GPIO_setupPortDirection+0x7a>
    225c:	2b 81       	ldd	r18, Y+3	; 0x03
    225e:	3c 81       	ldd	r19, Y+4	; 0x04
    2260:	22 30       	cpi	r18, 0x02	; 2
    2262:	31 05       	cpc	r19, r1
    2264:	81 f0       	breq	.+32     	; 0x2286 <GPIO_setupPortDirection+0x68>
    2266:	8b 81       	ldd	r24, Y+3	; 0x03
    2268:	9c 81       	ldd	r25, Y+4	; 0x04
    226a:	83 30       	cpi	r24, 0x03	; 3
    226c:	91 05       	cpc	r25, r1
    226e:	81 f0       	breq	.+32     	; 0x2290 <GPIO_setupPortDirection+0x72>
    2270:	13 c0       	rjmp	.+38     	; 0x2298 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2272:	ea e3       	ldi	r30, 0x3A	; 58
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	8a 81       	ldd	r24, Y+2	; 0x02
    2278:	80 83       	st	Z, r24
    227a:	0e c0       	rjmp	.+28     	; 0x2298 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    227c:	e7 e3       	ldi	r30, 0x37	; 55
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	8a 81       	ldd	r24, Y+2	; 0x02
    2282:	80 83       	st	Z, r24
    2284:	09 c0       	rjmp	.+18     	; 0x2298 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2286:	e4 e3       	ldi	r30, 0x34	; 52
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	8a 81       	ldd	r24, Y+2	; 0x02
    228c:	80 83       	st	Z, r24
    228e:	04 c0       	rjmp	.+8      	; 0x2298 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2290:	e1 e3       	ldi	r30, 0x31	; 49
    2292:	f0 e0       	ldi	r31, 0x00	; 0
    2294:	8a 81       	ldd	r24, Y+2	; 0x02
    2296:	80 83       	st	Z, r24
			break;
		}
	}
}
    2298:	0f 90       	pop	r0
    229a:	0f 90       	pop	r0
    229c:	0f 90       	pop	r0
    229e:	0f 90       	pop	r0
    22a0:	cf 91       	pop	r28
    22a2:	df 91       	pop	r29
    22a4:	08 95       	ret

000022a6 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    22a6:	df 93       	push	r29
    22a8:	cf 93       	push	r28
    22aa:	00 d0       	rcall	.+0      	; 0x22ac <GPIO_writePort+0x6>
    22ac:	00 d0       	rcall	.+0      	; 0x22ae <GPIO_writePort+0x8>
    22ae:	cd b7       	in	r28, 0x3d	; 61
    22b0:	de b7       	in	r29, 0x3e	; 62
    22b2:	89 83       	std	Y+1, r24	; 0x01
    22b4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    22b6:	89 81       	ldd	r24, Y+1	; 0x01
    22b8:	84 30       	cpi	r24, 0x04	; 4
    22ba:	90 f5       	brcc	.+100    	; 0x2320 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    22bc:	89 81       	ldd	r24, Y+1	; 0x01
    22be:	28 2f       	mov	r18, r24
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	3c 83       	std	Y+4, r19	; 0x04
    22c4:	2b 83       	std	Y+3, r18	; 0x03
    22c6:	8b 81       	ldd	r24, Y+3	; 0x03
    22c8:	9c 81       	ldd	r25, Y+4	; 0x04
    22ca:	81 30       	cpi	r24, 0x01	; 1
    22cc:	91 05       	cpc	r25, r1
    22ce:	d1 f0       	breq	.+52     	; 0x2304 <GPIO_writePort+0x5e>
    22d0:	2b 81       	ldd	r18, Y+3	; 0x03
    22d2:	3c 81       	ldd	r19, Y+4	; 0x04
    22d4:	22 30       	cpi	r18, 0x02	; 2
    22d6:	31 05       	cpc	r19, r1
    22d8:	2c f4       	brge	.+10     	; 0x22e4 <GPIO_writePort+0x3e>
    22da:	8b 81       	ldd	r24, Y+3	; 0x03
    22dc:	9c 81       	ldd	r25, Y+4	; 0x04
    22de:	00 97       	sbiw	r24, 0x00	; 0
    22e0:	61 f0       	breq	.+24     	; 0x22fa <GPIO_writePort+0x54>
    22e2:	1e c0       	rjmp	.+60     	; 0x2320 <GPIO_writePort+0x7a>
    22e4:	2b 81       	ldd	r18, Y+3	; 0x03
    22e6:	3c 81       	ldd	r19, Y+4	; 0x04
    22e8:	22 30       	cpi	r18, 0x02	; 2
    22ea:	31 05       	cpc	r19, r1
    22ec:	81 f0       	breq	.+32     	; 0x230e <GPIO_writePort+0x68>
    22ee:	8b 81       	ldd	r24, Y+3	; 0x03
    22f0:	9c 81       	ldd	r25, Y+4	; 0x04
    22f2:	83 30       	cpi	r24, 0x03	; 3
    22f4:	91 05       	cpc	r25, r1
    22f6:	81 f0       	breq	.+32     	; 0x2318 <GPIO_writePort+0x72>
    22f8:	13 c0       	rjmp	.+38     	; 0x2320 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    22fa:	eb e3       	ldi	r30, 0x3B	; 59
    22fc:	f0 e0       	ldi	r31, 0x00	; 0
    22fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2300:	80 83       	st	Z, r24
    2302:	0e c0       	rjmp	.+28     	; 0x2320 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2304:	e8 e3       	ldi	r30, 0x38	; 56
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	8a 81       	ldd	r24, Y+2	; 0x02
    230a:	80 83       	st	Z, r24
    230c:	09 c0       	rjmp	.+18     	; 0x2320 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    230e:	e5 e3       	ldi	r30, 0x35	; 53
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	8a 81       	ldd	r24, Y+2	; 0x02
    2314:	80 83       	st	Z, r24
    2316:	04 c0       	rjmp	.+8      	; 0x2320 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2318:	e2 e3       	ldi	r30, 0x32	; 50
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	8a 81       	ldd	r24, Y+2	; 0x02
    231e:	80 83       	st	Z, r24
			break;
		}
	}
}
    2320:	0f 90       	pop	r0
    2322:	0f 90       	pop	r0
    2324:	0f 90       	pop	r0
    2326:	0f 90       	pop	r0
    2328:	cf 91       	pop	r28
    232a:	df 91       	pop	r29
    232c:	08 95       	ret

0000232e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    232e:	df 93       	push	r29
    2330:	cf 93       	push	r28
    2332:	00 d0       	rcall	.+0      	; 0x2334 <GPIO_readPort+0x6>
    2334:	00 d0       	rcall	.+0      	; 0x2336 <GPIO_readPort+0x8>
    2336:	cd b7       	in	r28, 0x3d	; 61
    2338:	de b7       	in	r29, 0x3e	; 62
    233a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    233c:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    233e:	8a 81       	ldd	r24, Y+2	; 0x02
    2340:	84 30       	cpi	r24, 0x04	; 4
    2342:	90 f5       	brcc	.+100    	; 0x23a8 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2344:	8a 81       	ldd	r24, Y+2	; 0x02
    2346:	28 2f       	mov	r18, r24
    2348:	30 e0       	ldi	r19, 0x00	; 0
    234a:	3c 83       	std	Y+4, r19	; 0x04
    234c:	2b 83       	std	Y+3, r18	; 0x03
    234e:	8b 81       	ldd	r24, Y+3	; 0x03
    2350:	9c 81       	ldd	r25, Y+4	; 0x04
    2352:	81 30       	cpi	r24, 0x01	; 1
    2354:	91 05       	cpc	r25, r1
    2356:	d1 f0       	breq	.+52     	; 0x238c <GPIO_readPort+0x5e>
    2358:	2b 81       	ldd	r18, Y+3	; 0x03
    235a:	3c 81       	ldd	r19, Y+4	; 0x04
    235c:	22 30       	cpi	r18, 0x02	; 2
    235e:	31 05       	cpc	r19, r1
    2360:	2c f4       	brge	.+10     	; 0x236c <GPIO_readPort+0x3e>
    2362:	8b 81       	ldd	r24, Y+3	; 0x03
    2364:	9c 81       	ldd	r25, Y+4	; 0x04
    2366:	00 97       	sbiw	r24, 0x00	; 0
    2368:	61 f0       	breq	.+24     	; 0x2382 <GPIO_readPort+0x54>
    236a:	1e c0       	rjmp	.+60     	; 0x23a8 <GPIO_readPort+0x7a>
    236c:	2b 81       	ldd	r18, Y+3	; 0x03
    236e:	3c 81       	ldd	r19, Y+4	; 0x04
    2370:	22 30       	cpi	r18, 0x02	; 2
    2372:	31 05       	cpc	r19, r1
    2374:	81 f0       	breq	.+32     	; 0x2396 <GPIO_readPort+0x68>
    2376:	8b 81       	ldd	r24, Y+3	; 0x03
    2378:	9c 81       	ldd	r25, Y+4	; 0x04
    237a:	83 30       	cpi	r24, 0x03	; 3
    237c:	91 05       	cpc	r25, r1
    237e:	81 f0       	breq	.+32     	; 0x23a0 <GPIO_readPort+0x72>
    2380:	13 c0       	rjmp	.+38     	; 0x23a8 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2382:	e9 e3       	ldi	r30, 0x39	; 57
    2384:	f0 e0       	ldi	r31, 0x00	; 0
    2386:	80 81       	ld	r24, Z
    2388:	89 83       	std	Y+1, r24	; 0x01
    238a:	0e c0       	rjmp	.+28     	; 0x23a8 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    238c:	e6 e3       	ldi	r30, 0x36	; 54
    238e:	f0 e0       	ldi	r31, 0x00	; 0
    2390:	80 81       	ld	r24, Z
    2392:	89 83       	std	Y+1, r24	; 0x01
    2394:	09 c0       	rjmp	.+18     	; 0x23a8 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2396:	e3 e3       	ldi	r30, 0x33	; 51
    2398:	f0 e0       	ldi	r31, 0x00	; 0
    239a:	80 81       	ld	r24, Z
    239c:	89 83       	std	Y+1, r24	; 0x01
    239e:	04 c0       	rjmp	.+8      	; 0x23a8 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    23a0:	e0 e3       	ldi	r30, 0x30	; 48
    23a2:	f0 e0       	ldi	r31, 0x00	; 0
    23a4:	80 81       	ld	r24, Z
    23a6:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    23a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    23aa:	0f 90       	pop	r0
    23ac:	0f 90       	pop	r0
    23ae:	0f 90       	pop	r0
    23b0:	0f 90       	pop	r0
    23b2:	cf 91       	pop	r28
    23b4:	df 91       	pop	r29
    23b6:	08 95       	ret

000023b8 <main>:
#include "util/delay.h"
#include "twi.h"
#include "Control_ECU.h"

int main(void)
{
    23b8:	df 93       	push	r29
    23ba:	cf 93       	push	r28
    23bc:	cd b7       	in	r28, 0x3d	; 61
    23be:	de b7       	in	r29, 0x3e	; 62

	start();
    23c0:	0e 94 a3 05 	call	0xb46	; 0xb46 <start>
	return 0;
    23c4:	80 e0       	ldi	r24, 0x00	; 0
    23c6:	90 e0       	ldi	r25, 0x00	; 0
}
    23c8:	cf 91       	pop	r28
    23ca:	df 91       	pop	r29
    23cc:	08 95       	ret

000023ce <__vector_9>:
/*******************************************************************************
 *                                ISR                                          *
 *******************************************************************************/
/* Timer1 OV mode */
ISR(TIMER1_OVF_vect)
{
    23ce:	1f 92       	push	r1
    23d0:	0f 92       	push	r0
    23d2:	0f b6       	in	r0, 0x3f	; 63
    23d4:	0f 92       	push	r0
    23d6:	11 24       	eor	r1, r1
    23d8:	2f 93       	push	r18
    23da:	3f 93       	push	r19
    23dc:	4f 93       	push	r20
    23de:	5f 93       	push	r21
    23e0:	6f 93       	push	r22
    23e2:	7f 93       	push	r23
    23e4:	8f 93       	push	r24
    23e6:	9f 93       	push	r25
    23e8:	af 93       	push	r26
    23ea:	bf 93       	push	r27
    23ec:	ef 93       	push	r30
    23ee:	ff 93       	push	r31
    23f0:	df 93       	push	r29
    23f2:	cf 93       	push	r28
    23f4:	cd b7       	in	r28, 0x3d	; 61
    23f6:	de b7       	in	r29, 0x3e	; 62
	if (*g_Timer1CallBackPtr != NULL_PTR)
    23f8:	80 91 72 00 	lds	r24, 0x0072
    23fc:	90 91 73 00 	lds	r25, 0x0073
    2400:	00 97       	sbiw	r24, 0x00	; 0
    2402:	29 f0       	breq	.+10     	; 0x240e <__vector_9+0x40>
	{
		(*g_Timer1CallBackPtr)();
    2404:	e0 91 72 00 	lds	r30, 0x0072
    2408:	f0 91 73 00 	lds	r31, 0x0073
    240c:	09 95       	icall
	}
}
    240e:	cf 91       	pop	r28
    2410:	df 91       	pop	r29
    2412:	ff 91       	pop	r31
    2414:	ef 91       	pop	r30
    2416:	bf 91       	pop	r27
    2418:	af 91       	pop	r26
    241a:	9f 91       	pop	r25
    241c:	8f 91       	pop	r24
    241e:	7f 91       	pop	r23
    2420:	6f 91       	pop	r22
    2422:	5f 91       	pop	r21
    2424:	4f 91       	pop	r20
    2426:	3f 91       	pop	r19
    2428:	2f 91       	pop	r18
    242a:	0f 90       	pop	r0
    242c:	0f be       	out	0x3f, r0	; 63
    242e:	0f 90       	pop	r0
    2430:	1f 90       	pop	r1
    2432:	18 95       	reti

00002434 <__vector_7>:

/* Timer1 COMP mode */
ISR(TIMER1_COMPA_vect)
{
    2434:	1f 92       	push	r1
    2436:	0f 92       	push	r0
    2438:	0f b6       	in	r0, 0x3f	; 63
    243a:	0f 92       	push	r0
    243c:	11 24       	eor	r1, r1
    243e:	2f 93       	push	r18
    2440:	3f 93       	push	r19
    2442:	4f 93       	push	r20
    2444:	5f 93       	push	r21
    2446:	6f 93       	push	r22
    2448:	7f 93       	push	r23
    244a:	8f 93       	push	r24
    244c:	9f 93       	push	r25
    244e:	af 93       	push	r26
    2450:	bf 93       	push	r27
    2452:	ef 93       	push	r30
    2454:	ff 93       	push	r31
    2456:	df 93       	push	r29
    2458:	cf 93       	push	r28
    245a:	cd b7       	in	r28, 0x3d	; 61
    245c:	de b7       	in	r29, 0x3e	; 62
	if (*g_Timer1CallBackPtr != NULL_PTR)
    245e:	80 91 72 00 	lds	r24, 0x0072
    2462:	90 91 73 00 	lds	r25, 0x0073
    2466:	00 97       	sbiw	r24, 0x00	; 0
    2468:	29 f0       	breq	.+10     	; 0x2474 <__vector_7+0x40>
	{
		(*g_Timer1CallBackPtr)();
    246a:	e0 91 72 00 	lds	r30, 0x0072
    246e:	f0 91 73 00 	lds	r31, 0x0073
    2472:	09 95       	icall
	}
}
    2474:	cf 91       	pop	r28
    2476:	df 91       	pop	r29
    2478:	ff 91       	pop	r31
    247a:	ef 91       	pop	r30
    247c:	bf 91       	pop	r27
    247e:	af 91       	pop	r26
    2480:	9f 91       	pop	r25
    2482:	8f 91       	pop	r24
    2484:	7f 91       	pop	r23
    2486:	6f 91       	pop	r22
    2488:	5f 91       	pop	r21
    248a:	4f 91       	pop	r20
    248c:	3f 91       	pop	r19
    248e:	2f 91       	pop	r18
    2490:	0f 90       	pop	r0
    2492:	0f be       	out	0x3f, r0	; 63
    2494:	0f 90       	pop	r0
    2496:	1f 90       	pop	r1
    2498:	18 95       	reti

0000249a <Timer1_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void Timer1_init(const Timer1_Configtype * Config_Ptr)
{
    249a:	df 93       	push	r29
    249c:	cf 93       	push	r28
    249e:	00 d0       	rcall	.+0      	; 0x24a0 <Timer1_init+0x6>
    24a0:	cd b7       	in	r28, 0x3d	; 61
    24a2:	de b7       	in	r29, 0x3e	; 62
    24a4:	9a 83       	std	Y+2, r25	; 0x02
    24a6:	89 83       	std	Y+1, r24	; 0x01
        TCCR1A =0;
    24a8:	ef e4       	ldi	r30, 0x4F	; 79
    24aa:	f0 e0       	ldi	r31, 0x00	; 0
    24ac:	10 82       	st	Z, r1

		SET_BIT(TCCR1A,FOC1A);
    24ae:	af e4       	ldi	r26, 0x4F	; 79
    24b0:	b0 e0       	ldi	r27, 0x00	; 0
    24b2:	ef e4       	ldi	r30, 0x4F	; 79
    24b4:	f0 e0       	ldi	r31, 0x00	; 0
    24b6:	80 81       	ld	r24, Z
    24b8:	88 60       	ori	r24, 0x08	; 8
    24ba:	8c 93       	st	X, r24

		SET_BIT(TCCR1A,FOC1B);
    24bc:	af e4       	ldi	r26, 0x4F	; 79
    24be:	b0 e0       	ldi	r27, 0x00	; 0
    24c0:	ef e4       	ldi	r30, 0x4F	; 79
    24c2:	f0 e0       	ldi	r31, 0x00	; 0
    24c4:	80 81       	ld	r24, Z
    24c6:	84 60       	ori	r24, 0x04	; 4
    24c8:	8c 93       	st	X, r24
		TCCR1B = Config_Ptr->prescale;
    24ca:	ae e4       	ldi	r26, 0x4E	; 78
    24cc:	b0 e0       	ldi	r27, 0x00	; 0
    24ce:	e9 81       	ldd	r30, Y+1	; 0x01
    24d0:	fa 81       	ldd	r31, Y+2	; 0x02
    24d2:	85 81       	ldd	r24, Z+5	; 0x05
    24d4:	8c 93       	st	X, r24
		TCNT1 = Config_Ptr->initialvalue;
    24d6:	ac e4       	ldi	r26, 0x4C	; 76
    24d8:	b0 e0       	ldi	r27, 0x00	; 0
    24da:	e9 81       	ldd	r30, Y+1	; 0x01
    24dc:	fa 81       	ldd	r31, Y+2	; 0x02
    24de:	81 81       	ldd	r24, Z+1	; 0x01
    24e0:	92 81       	ldd	r25, Z+2	; 0x02
    24e2:	11 96       	adiw	r26, 0x01	; 1
    24e4:	9c 93       	st	X, r25
    24e6:	8e 93       	st	-X, r24

		if( (Config_Ptr -> mode) == NORMAL )
    24e8:	e9 81       	ldd	r30, Y+1	; 0x01
    24ea:	fa 81       	ldd	r31, Y+2	; 0x02
    24ec:	80 81       	ld	r24, Z
    24ee:	88 23       	and	r24, r24
    24f0:	79 f4       	brne	.+30     	; 0x2510 <Timer1_init+0x76>
		{
			/* Enable interrupts for OV mode */
			SET_BIT(TIMSK,TOIE1);
    24f2:	a9 e5       	ldi	r26, 0x59	; 89
    24f4:	b0 e0       	ldi	r27, 0x00	; 0
    24f6:	e9 e5       	ldi	r30, 0x59	; 89
    24f8:	f0 e0       	ldi	r31, 0x00	; 0
    24fa:	80 81       	ld	r24, Z
    24fc:	84 60       	ori	r24, 0x04	; 4
    24fe:	8c 93       	st	X, r24
			/* Enable overflow flag */
			SET_BIT(TIFR,TOV1);
    2500:	a8 e5       	ldi	r26, 0x58	; 88
    2502:	b0 e0       	ldi	r27, 0x00	; 0
    2504:	e8 e5       	ldi	r30, 0x58	; 88
    2506:	f0 e0       	ldi	r31, 0x00	; 0
    2508:	80 81       	ld	r24, Z
    250a:	84 60       	ori	r24, 0x04	; 4
    250c:	8c 93       	st	X, r24
    250e:	23 c0       	rjmp	.+70     	; 0x2556 <Timer1_init+0xbc>
		}
		else if ( (Config_Ptr -> mode) == COMPARE )
    2510:	e9 81       	ldd	r30, Y+1	; 0x01
    2512:	fa 81       	ldd	r31, Y+2	; 0x02
    2514:	80 81       	ld	r24, Z
    2516:	81 30       	cpi	r24, 0x01	; 1
    2518:	f1 f4       	brne	.+60     	; 0x2556 <Timer1_init+0xbc>
		{
			SET_BIT(TCCR1B,WGM12);
    251a:	ae e4       	ldi	r26, 0x4E	; 78
    251c:	b0 e0       	ldi	r27, 0x00	; 0
    251e:	ee e4       	ldi	r30, 0x4E	; 78
    2520:	f0 e0       	ldi	r31, 0x00	; 0
    2522:	80 81       	ld	r24, Z
    2524:	88 60       	ori	r24, 0x08	; 8
    2526:	8c 93       	st	X, r24
			OCR1A = Config_Ptr -> comparevalue;
    2528:	aa e4       	ldi	r26, 0x4A	; 74
    252a:	b0 e0       	ldi	r27, 0x00	; 0
    252c:	e9 81       	ldd	r30, Y+1	; 0x01
    252e:	fa 81       	ldd	r31, Y+2	; 0x02
    2530:	83 81       	ldd	r24, Z+3	; 0x03
    2532:	94 81       	ldd	r25, Z+4	; 0x04
    2534:	11 96       	adiw	r26, 0x01	; 1
    2536:	9c 93       	st	X, r25
    2538:	8e 93       	st	-X, r24
			SET_BIT(TIMSK,OCIE1A); /*  interrupts for CTC mode */
    253a:	a9 e5       	ldi	r26, 0x59	; 89
    253c:	b0 e0       	ldi	r27, 0x00	; 0
    253e:	e9 e5       	ldi	r30, 0x59	; 89
    2540:	f0 e0       	ldi	r31, 0x00	; 0
    2542:	80 81       	ld	r24, Z
    2544:	80 61       	ori	r24, 0x10	; 16
    2546:	8c 93       	st	X, r24
			SET_BIT(TIFR,OCF1A); /* CTC flag */
    2548:	a8 e5       	ldi	r26, 0x58	; 88
    254a:	b0 e0       	ldi	r27, 0x00	; 0
    254c:	e8 e5       	ldi	r30, 0x58	; 88
    254e:	f0 e0       	ldi	r31, 0x00	; 0
    2550:	80 81       	ld	r24, Z
    2552:	80 61       	ori	r24, 0x10	; 16
    2554:	8c 93       	st	X, r24
		}
}
    2556:	0f 90       	pop	r0
    2558:	0f 90       	pop	r0
    255a:	cf 91       	pop	r28
    255c:	df 91       	pop	r29
    255e:	08 95       	ret

00002560 <Timer1_deInit>:



void Timer1_deInit(void)
{
    2560:	df 93       	push	r29
    2562:	cf 93       	push	r28
    2564:	cd b7       	in	r28, 0x3d	; 61
    2566:	de b7       	in	r29, 0x3e	; 62
	TCCR1A =0;
    2568:	ef e4       	ldi	r30, 0x4F	; 79
    256a:	f0 e0       	ldi	r31, 0x00	; 0
    256c:	10 82       	st	Z, r1
	TCCR1B = 0; /* disable clock */
    256e:	ee e4       	ldi	r30, 0x4E	; 78
    2570:	f0 e0       	ldi	r31, 0x00	; 0
    2572:	10 82       	st	Z, r1
	TCNT1 = 0;
    2574:	ec e4       	ldi	r30, 0x4C	; 76
    2576:	f0 e0       	ldi	r31, 0x00	; 0
    2578:	11 82       	std	Z+1, r1	; 0x01
    257a:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK, TOIE1); /* disable interrupts for overflow mode */
    257c:	a9 e5       	ldi	r26, 0x59	; 89
    257e:	b0 e0       	ldi	r27, 0x00	; 0
    2580:	e9 e5       	ldi	r30, 0x59	; 89
    2582:	f0 e0       	ldi	r31, 0x00	; 0
    2584:	80 81       	ld	r24, Z
    2586:	8b 7f       	andi	r24, 0xFB	; 251
    2588:	8c 93       	st	X, r24
	OCR1A = 0;  /* clear compare value for CTC mode */
    258a:	ea e4       	ldi	r30, 0x4A	; 74
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	11 82       	std	Z+1, r1	; 0x01
    2590:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK, OCIE1A); /* disable interrupts for CTC mode */
    2592:	a9 e5       	ldi	r26, 0x59	; 89
    2594:	b0 e0       	ldi	r27, 0x00	; 0
    2596:	e9 e5       	ldi	r30, 0x59	; 89
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	80 81       	ld	r24, Z
    259c:	8f 7e       	andi	r24, 0xEF	; 239
    259e:	8c 93       	st	X, r24
	g_Timer1CallBackPtr = NULL_PTR;
    25a0:	10 92 73 00 	sts	0x0073, r1
    25a4:	10 92 72 00 	sts	0x0072, r1
}
    25a8:	cf 91       	pop	r28
    25aa:	df 91       	pop	r29
    25ac:	08 95       	ret

000025ae <Timer1_setCallBack>:




void Timer1_setCallBack(void(*a_ptr)(void))
{
    25ae:	df 93       	push	r29
    25b0:	cf 93       	push	r28
    25b2:	00 d0       	rcall	.+0      	; 0x25b4 <Timer1_setCallBack+0x6>
    25b4:	cd b7       	in	r28, 0x3d	; 61
    25b6:	de b7       	in	r29, 0x3e	; 62
    25b8:	9a 83       	std	Y+2, r25	; 0x02
    25ba:	89 83       	std	Y+1, r24	; 0x01
	g_Timer1CallBackPtr = a_ptr;/*set the call back function address */
    25bc:	89 81       	ldd	r24, Y+1	; 0x01
    25be:	9a 81       	ldd	r25, Y+2	; 0x02
    25c0:	90 93 73 00 	sts	0x0073, r25
    25c4:	80 93 72 00 	sts	0x0072, r24
}
    25c8:	0f 90       	pop	r0
    25ca:	0f 90       	pop	r0
    25cc:	cf 91       	pop	r28
    25ce:	df 91       	pop	r29
    25d0:	08 95       	ret

000025d2 <Timer1_setValue>:



void Timer1_setValue (uint8 newValue)
{
    25d2:	df 93       	push	r29
    25d4:	cf 93       	push	r28
    25d6:	0f 92       	push	r0
    25d8:	cd b7       	in	r28, 0x3d	; 61
    25da:	de b7       	in	r29, 0x3e	; 62
    25dc:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = newValue; /*add new value*/
    25de:	ec e4       	ldi	r30, 0x4C	; 76
    25e0:	f0 e0       	ldi	r31, 0x00	; 0
    25e2:	89 81       	ldd	r24, Y+1	; 0x01
    25e4:	88 2f       	mov	r24, r24
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	91 83       	std	Z+1, r25	; 0x01
    25ea:	80 83       	st	Z, r24
}
    25ec:	0f 90       	pop	r0
    25ee:	cf 91       	pop	r28
    25f0:	df 91       	pop	r29
    25f2:	08 95       	ret

000025f4 <Timer1_clearValue>:


void Timer1_clearValue(void)
{
    25f4:	df 93       	push	r29
    25f6:	cf 93       	push	r28
    25f8:	cd b7       	in	r28, 0x3d	; 61
    25fa:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0; /*clear value*/
    25fc:	ec e4       	ldi	r30, 0x4C	; 76
    25fe:	f0 e0       	ldi	r31, 0x00	; 0
    2600:	11 82       	std	Z+1, r1	; 0x01
    2602:	10 82       	st	Z, r1
}
    2604:	cf 91       	pop	r28
    2606:	df 91       	pop	r29
    2608:	08 95       	ret

0000260a <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    260a:	df 93       	push	r29
    260c:	cf 93       	push	r28
    260e:	00 d0       	rcall	.+0      	; 0x2610 <TWI_init+0x6>
    2610:	cd b7       	in	r28, 0x3d	; 61
    2612:	de b7       	in	r29, 0x3e	; 62
    2614:	9a 83       	std	Y+2, r25	; 0x02
    2616:	89 83       	std	Y+1, r24	; 0x01


	 /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
	    TWBR = 0x02;
    2618:	e0 e2       	ldi	r30, 0x20	; 32
    261a:	f0 e0       	ldi	r31, 0x00	; 0
    261c:	82 e0       	ldi	r24, 0x02	; 2
    261e:	80 83       	st	Z, r24
		TWSR = 0x00;
    2620:	e1 e2       	ldi	r30, 0x21	; 33
    2622:	f0 e0       	ldi	r31, 0x00	; 0
    2624:	10 82       	st	Z, r1

	    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
	       General Call Recognition: Off */
	    TWAR = 0b00000010; // my address = 0x01 :)
    2626:	e2 e2       	ldi	r30, 0x22	; 34
    2628:	f0 e0       	ldi	r31, 0x00	; 0
    262a:	82 e0       	ldi	r24, 0x02	; 2
    262c:	80 83       	st	Z, r24

	    TWCR = (1<<TWEN); /* enable TWI */
    262e:	e6 e5       	ldi	r30, 0x56	; 86
    2630:	f0 e0       	ldi	r31, 0x00	; 0
    2632:	84 e0       	ldi	r24, 0x04	; 4
    2634:	80 83       	st	Z, r24
}
    2636:	0f 90       	pop	r0
    2638:	0f 90       	pop	r0
    263a:	cf 91       	pop	r28
    263c:	df 91       	pop	r29
    263e:	08 95       	ret

00002640 <TWI_start>:

void TWI_start(void)
{
    2640:	df 93       	push	r29
    2642:	cf 93       	push	r28
    2644:	cd b7       	in	r28, 0x3d	; 61
    2646:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2648:	e6 e5       	ldi	r30, 0x56	; 86
    264a:	f0 e0       	ldi	r31, 0x00	; 0
    264c:	84 ea       	ldi	r24, 0xA4	; 164
    264e:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2650:	e6 e5       	ldi	r30, 0x56	; 86
    2652:	f0 e0       	ldi	r31, 0x00	; 0
    2654:	80 81       	ld	r24, Z
    2656:	88 23       	and	r24, r24
    2658:	dc f7       	brge	.-10     	; 0x2650 <TWI_start+0x10>
}
    265a:	cf 91       	pop	r28
    265c:	df 91       	pop	r29
    265e:	08 95       	ret

00002660 <TWI_stop>:

void TWI_stop(void)
{
    2660:	df 93       	push	r29
    2662:	cf 93       	push	r28
    2664:	cd b7       	in	r28, 0x3d	; 61
    2666:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2668:	e6 e5       	ldi	r30, 0x56	; 86
    266a:	f0 e0       	ldi	r31, 0x00	; 0
    266c:	84 e9       	ldi	r24, 0x94	; 148
    266e:	80 83       	st	Z, r24
}
    2670:	cf 91       	pop	r28
    2672:	df 91       	pop	r29
    2674:	08 95       	ret

00002676 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2676:	df 93       	push	r29
    2678:	cf 93       	push	r28
    267a:	0f 92       	push	r0
    267c:	cd b7       	in	r28, 0x3d	; 61
    267e:	de b7       	in	r29, 0x3e	; 62
    2680:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    2682:	e3 e2       	ldi	r30, 0x23	; 35
    2684:	f0 e0       	ldi	r31, 0x00	; 0
    2686:	89 81       	ldd	r24, Y+1	; 0x01
    2688:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    268a:	e6 e5       	ldi	r30, 0x56	; 86
    268c:	f0 e0       	ldi	r31, 0x00	; 0
    268e:	84 e8       	ldi	r24, 0x84	; 132
    2690:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2692:	e6 e5       	ldi	r30, 0x56	; 86
    2694:	f0 e0       	ldi	r31, 0x00	; 0
    2696:	80 81       	ld	r24, Z
    2698:	88 23       	and	r24, r24
    269a:	dc f7       	brge	.-10     	; 0x2692 <TWI_writeByte+0x1c>
}
    269c:	0f 90       	pop	r0
    269e:	cf 91       	pop	r28
    26a0:	df 91       	pop	r29
    26a2:	08 95       	ret

000026a4 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    26a4:	df 93       	push	r29
    26a6:	cf 93       	push	r28
    26a8:	cd b7       	in	r28, 0x3d	; 61
    26aa:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    26ac:	e6 e5       	ldi	r30, 0x56	; 86
    26ae:	f0 e0       	ldi	r31, 0x00	; 0
    26b0:	84 ec       	ldi	r24, 0xC4	; 196
    26b2:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    26b4:	e6 e5       	ldi	r30, 0x56	; 86
    26b6:	f0 e0       	ldi	r31, 0x00	; 0
    26b8:	80 81       	ld	r24, Z
    26ba:	88 23       	and	r24, r24
    26bc:	dc f7       	brge	.-10     	; 0x26b4 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    26be:	e3 e2       	ldi	r30, 0x23	; 35
    26c0:	f0 e0       	ldi	r31, 0x00	; 0
    26c2:	80 81       	ld	r24, Z
}
    26c4:	cf 91       	pop	r28
    26c6:	df 91       	pop	r29
    26c8:	08 95       	ret

000026ca <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    26ca:	df 93       	push	r29
    26cc:	cf 93       	push	r28
    26ce:	cd b7       	in	r28, 0x3d	; 61
    26d0:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    26d2:	e6 e5       	ldi	r30, 0x56	; 86
    26d4:	f0 e0       	ldi	r31, 0x00	; 0
    26d6:	84 e8       	ldi	r24, 0x84	; 132
    26d8:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    26da:	e6 e5       	ldi	r30, 0x56	; 86
    26dc:	f0 e0       	ldi	r31, 0x00	; 0
    26de:	80 81       	ld	r24, Z
    26e0:	88 23       	and	r24, r24
    26e2:	dc f7       	brge	.-10     	; 0x26da <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    26e4:	e3 e2       	ldi	r30, 0x23	; 35
    26e6:	f0 e0       	ldi	r31, 0x00	; 0
    26e8:	80 81       	ld	r24, Z
}
    26ea:	cf 91       	pop	r28
    26ec:	df 91       	pop	r29
    26ee:	08 95       	ret

000026f0 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    26f0:	df 93       	push	r29
    26f2:	cf 93       	push	r28
    26f4:	0f 92       	push	r0
    26f6:	cd b7       	in	r28, 0x3d	; 61
    26f8:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    26fa:	e1 e2       	ldi	r30, 0x21	; 33
    26fc:	f0 e0       	ldi	r31, 0x00	; 0
    26fe:	80 81       	ld	r24, Z
    2700:	88 7f       	andi	r24, 0xF8	; 248
    2702:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2704:	89 81       	ldd	r24, Y+1	; 0x01
}
    2706:	0f 90       	pop	r0
    2708:	cf 91       	pop	r28
    270a:	df 91       	pop	r29
    270c:	08 95       	ret

0000270e <UART_init>:
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)

{
    270e:	df 93       	push	r29
    2710:	cf 93       	push	r28
    2712:	00 d0       	rcall	.+0      	; 0x2714 <UART_init+0x6>
    2714:	00 d0       	rcall	.+0      	; 0x2716 <UART_init+0x8>
    2716:	cd b7       	in	r28, 0x3d	; 61
    2718:	de b7       	in	r29, 0x3e	; 62
    271a:	9c 83       	std	Y+4, r25	; 0x04
    271c:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    271e:	1a 82       	std	Y+2, r1	; 0x02
    2720:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2722:	eb e2       	ldi	r30, 0x2B	; 43
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	82 e0       	ldi	r24, 0x02	; 2
    2728:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    272a:	ea e2       	ldi	r30, 0x2A	; 42
    272c:	f0 e0       	ldi	r31, 0x00	; 0
    272e:	88 e1       	ldi	r24, 0x18	; 24
    2730:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
    2732:	e0 e4       	ldi	r30, 0x40	; 64
    2734:	f0 e0       	ldi	r31, 0x00	; 0
    2736:	86 e8       	ldi	r24, 0x86	; 134
    2738:	80 83       	st	Z, r24

	UCSRC |= (Config_Ptr->parity<<UPM0);
    273a:	a0 e4       	ldi	r26, 0x40	; 64
    273c:	b0 e0       	ldi	r27, 0x00	; 0
    273e:	e0 e4       	ldi	r30, 0x40	; 64
    2740:	f0 e0       	ldi	r31, 0x00	; 0
    2742:	80 81       	ld	r24, Z
    2744:	28 2f       	mov	r18, r24
    2746:	eb 81       	ldd	r30, Y+3	; 0x03
    2748:	fc 81       	ldd	r31, Y+4	; 0x04
    274a:	80 81       	ld	r24, Z
    274c:	88 2f       	mov	r24, r24
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	82 95       	swap	r24
    2752:	92 95       	swap	r25
    2754:	90 7f       	andi	r25, 0xF0	; 240
    2756:	98 27       	eor	r25, r24
    2758:	80 7f       	andi	r24, 0xF0	; 240
    275a:	98 27       	eor	r25, r24
    275c:	82 2b       	or	r24, r18
    275e:	8c 93       	st	X, r24
	
	UCSRC |= (Config_Ptr->stop_bit<<USBS);
    2760:	a0 e4       	ldi	r26, 0x40	; 64
    2762:	b0 e0       	ldi	r27, 0x00	; 0
    2764:	e0 e4       	ldi	r30, 0x40	; 64
    2766:	f0 e0       	ldi	r31, 0x00	; 0
    2768:	80 81       	ld	r24, Z
    276a:	28 2f       	mov	r18, r24
    276c:	eb 81       	ldd	r30, Y+3	; 0x03
    276e:	fc 81       	ldd	r31, Y+4	; 0x04
    2770:	81 81       	ldd	r24, Z+1	; 0x01
    2772:	88 2f       	mov	r24, r24
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	88 0f       	add	r24, r24
    2778:	99 1f       	adc	r25, r25
    277a:	88 0f       	add	r24, r24
    277c:	99 1f       	adc	r25, r25
    277e:	88 0f       	add	r24, r24
    2780:	99 1f       	adc	r25, r25
    2782:	82 2b       	or	r24, r18
    2784:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    2786:	eb 81       	ldd	r30, Y+3	; 0x03
    2788:	fc 81       	ldd	r31, Y+4	; 0x04
    278a:	82 81       	ldd	r24, Z+2	; 0x02
    278c:	93 81       	ldd	r25, Z+3	; 0x03
    278e:	cc 01       	movw	r24, r24
    2790:	a0 e0       	ldi	r26, 0x00	; 0
    2792:	b0 e0       	ldi	r27, 0x00	; 0
    2794:	88 0f       	add	r24, r24
    2796:	99 1f       	adc	r25, r25
    2798:	aa 1f       	adc	r26, r26
    279a:	bb 1f       	adc	r27, r27
    279c:	88 0f       	add	r24, r24
    279e:	99 1f       	adc	r25, r25
    27a0:	aa 1f       	adc	r26, r26
    27a2:	bb 1f       	adc	r27, r27
    27a4:	88 0f       	add	r24, r24
    27a6:	99 1f       	adc	r25, r25
    27a8:	aa 1f       	adc	r26, r26
    27aa:	bb 1f       	adc	r27, r27
    27ac:	9c 01       	movw	r18, r24
    27ae:	ad 01       	movw	r20, r26
    27b0:	80 e0       	ldi	r24, 0x00	; 0
    27b2:	92 e1       	ldi	r25, 0x12	; 18
    27b4:	aa e7       	ldi	r26, 0x7A	; 122
    27b6:	b0 e0       	ldi	r27, 0x00	; 0
    27b8:	bc 01       	movw	r22, r24
    27ba:	cd 01       	movw	r24, r26
    27bc:	0e 94 89 14 	call	0x2912	; 0x2912 <__udivmodsi4>
    27c0:	da 01       	movw	r26, r20
    27c2:	c9 01       	movw	r24, r18
    27c4:	01 97       	sbiw	r24, 0x01	; 1
    27c6:	9a 83       	std	Y+2, r25	; 0x02
    27c8:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    27ca:	e0 e4       	ldi	r30, 0x40	; 64
    27cc:	f0 e0       	ldi	r31, 0x00	; 0
    27ce:	89 81       	ldd	r24, Y+1	; 0x01
    27d0:	9a 81       	ldd	r25, Y+2	; 0x02
    27d2:	89 2f       	mov	r24, r25
    27d4:	99 27       	eor	r25, r25
    27d6:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    27d8:	e9 e2       	ldi	r30, 0x29	; 41
    27da:	f0 e0       	ldi	r31, 0x00	; 0
    27dc:	89 81       	ldd	r24, Y+1	; 0x01
    27de:	80 83       	st	Z, r24
}
    27e0:	0f 90       	pop	r0
    27e2:	0f 90       	pop	r0
    27e4:	0f 90       	pop	r0
    27e6:	0f 90       	pop	r0
    27e8:	cf 91       	pop	r28
    27ea:	df 91       	pop	r29
    27ec:	08 95       	ret

000027ee <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    27ee:	df 93       	push	r29
    27f0:	cf 93       	push	r28
    27f2:	0f 92       	push	r0
    27f4:	cd b7       	in	r28, 0x3d	; 61
    27f6:	de b7       	in	r29, 0x3e	; 62
    27f8:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    27fa:	eb e2       	ldi	r30, 0x2B	; 43
    27fc:	f0 e0       	ldi	r31, 0x00	; 0
    27fe:	80 81       	ld	r24, Z
    2800:	88 2f       	mov	r24, r24
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	80 72       	andi	r24, 0x20	; 32
    2806:	90 70       	andi	r25, 0x00	; 0
    2808:	00 97       	sbiw	r24, 0x00	; 0
    280a:	b9 f3       	breq	.-18     	; 0x27fa <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    280c:	ec e2       	ldi	r30, 0x2C	; 44
    280e:	f0 e0       	ldi	r31, 0x00	; 0
    2810:	89 81       	ldd	r24, Y+1	; 0x01
    2812:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2814:	0f 90       	pop	r0
    2816:	cf 91       	pop	r28
    2818:	df 91       	pop	r29
    281a:	08 95       	ret

0000281c <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    281c:	df 93       	push	r29
    281e:	cf 93       	push	r28
    2820:	cd b7       	in	r28, 0x3d	; 61
    2822:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2824:	eb e2       	ldi	r30, 0x2B	; 43
    2826:	f0 e0       	ldi	r31, 0x00	; 0
    2828:	80 81       	ld	r24, Z
    282a:	88 23       	and	r24, r24
    282c:	dc f7       	brge	.-10     	; 0x2824 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    282e:	ec e2       	ldi	r30, 0x2C	; 44
    2830:	f0 e0       	ldi	r31, 0x00	; 0
    2832:	80 81       	ld	r24, Z
}
    2834:	cf 91       	pop	r28
    2836:	df 91       	pop	r29
    2838:	08 95       	ret

0000283a <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    283a:	df 93       	push	r29
    283c:	cf 93       	push	r28
    283e:	00 d0       	rcall	.+0      	; 0x2840 <UART_sendString+0x6>
    2840:	0f 92       	push	r0
    2842:	cd b7       	in	r28, 0x3d	; 61
    2844:	de b7       	in	r29, 0x3e	; 62
    2846:	9b 83       	std	Y+3, r25	; 0x03
    2848:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    284a:	19 82       	std	Y+1, r1	; 0x01
    284c:	0e c0       	rjmp	.+28     	; 0x286a <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    284e:	89 81       	ldd	r24, Y+1	; 0x01
    2850:	28 2f       	mov	r18, r24
    2852:	30 e0       	ldi	r19, 0x00	; 0
    2854:	8a 81       	ldd	r24, Y+2	; 0x02
    2856:	9b 81       	ldd	r25, Y+3	; 0x03
    2858:	fc 01       	movw	r30, r24
    285a:	e2 0f       	add	r30, r18
    285c:	f3 1f       	adc	r31, r19
    285e:	80 81       	ld	r24, Z
    2860:	0e 94 f7 13 	call	0x27ee	; 0x27ee <UART_sendByte>
		i++;
    2864:	89 81       	ldd	r24, Y+1	; 0x01
    2866:	8f 5f       	subi	r24, 0xFF	; 255
    2868:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    286a:	89 81       	ldd	r24, Y+1	; 0x01
    286c:	28 2f       	mov	r18, r24
    286e:	30 e0       	ldi	r19, 0x00	; 0
    2870:	8a 81       	ldd	r24, Y+2	; 0x02
    2872:	9b 81       	ldd	r25, Y+3	; 0x03
    2874:	fc 01       	movw	r30, r24
    2876:	e2 0f       	add	r30, r18
    2878:	f3 1f       	adc	r31, r19
    287a:	80 81       	ld	r24, Z
    287c:	88 23       	and	r24, r24
    287e:	39 f7       	brne	.-50     	; 0x284e <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2880:	0f 90       	pop	r0
    2882:	0f 90       	pop	r0
    2884:	0f 90       	pop	r0
    2886:	cf 91       	pop	r28
    2888:	df 91       	pop	r29
    288a:	08 95       	ret

0000288c <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    288c:	0f 93       	push	r16
    288e:	1f 93       	push	r17
    2890:	df 93       	push	r29
    2892:	cf 93       	push	r28
    2894:	00 d0       	rcall	.+0      	; 0x2896 <UART_receiveString+0xa>
    2896:	0f 92       	push	r0
    2898:	cd b7       	in	r28, 0x3d	; 61
    289a:	de b7       	in	r29, 0x3e	; 62
    289c:	9b 83       	std	Y+3, r25	; 0x03
    289e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    28a0:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    28a2:	89 81       	ldd	r24, Y+1	; 0x01
    28a4:	28 2f       	mov	r18, r24
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	8a 81       	ldd	r24, Y+2	; 0x02
    28aa:	9b 81       	ldd	r25, Y+3	; 0x03
    28ac:	8c 01       	movw	r16, r24
    28ae:	02 0f       	add	r16, r18
    28b0:	13 1f       	adc	r17, r19
    28b2:	0e 94 0e 14 	call	0x281c	; 0x281c <UART_recieveByte>
    28b6:	f8 01       	movw	r30, r16
    28b8:	80 83       	st	Z, r24
    28ba:	0f c0       	rjmp	.+30     	; 0x28da <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    28bc:	89 81       	ldd	r24, Y+1	; 0x01
    28be:	8f 5f       	subi	r24, 0xFF	; 255
    28c0:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    28c2:	89 81       	ldd	r24, Y+1	; 0x01
    28c4:	28 2f       	mov	r18, r24
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ca:	9b 81       	ldd	r25, Y+3	; 0x03
    28cc:	8c 01       	movw	r16, r24
    28ce:	02 0f       	add	r16, r18
    28d0:	13 1f       	adc	r17, r19
    28d2:	0e 94 0e 14 	call	0x281c	; 0x281c <UART_recieveByte>
    28d6:	f8 01       	movw	r30, r16
    28d8:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    28da:	89 81       	ldd	r24, Y+1	; 0x01
    28dc:	28 2f       	mov	r18, r24
    28de:	30 e0       	ldi	r19, 0x00	; 0
    28e0:	8a 81       	ldd	r24, Y+2	; 0x02
    28e2:	9b 81       	ldd	r25, Y+3	; 0x03
    28e4:	fc 01       	movw	r30, r24
    28e6:	e2 0f       	add	r30, r18
    28e8:	f3 1f       	adc	r31, r19
    28ea:	80 81       	ld	r24, Z
    28ec:	83 32       	cpi	r24, 0x23	; 35
    28ee:	31 f7       	brne	.-52     	; 0x28bc <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    28f0:	89 81       	ldd	r24, Y+1	; 0x01
    28f2:	28 2f       	mov	r18, r24
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	8a 81       	ldd	r24, Y+2	; 0x02
    28f8:	9b 81       	ldd	r25, Y+3	; 0x03
    28fa:	fc 01       	movw	r30, r24
    28fc:	e2 0f       	add	r30, r18
    28fe:	f3 1f       	adc	r31, r19
    2900:	10 82       	st	Z, r1
}
    2902:	0f 90       	pop	r0
    2904:	0f 90       	pop	r0
    2906:	0f 90       	pop	r0
    2908:	cf 91       	pop	r28
    290a:	df 91       	pop	r29
    290c:	1f 91       	pop	r17
    290e:	0f 91       	pop	r16
    2910:	08 95       	ret

00002912 <__udivmodsi4>:
    2912:	a1 e2       	ldi	r26, 0x21	; 33
    2914:	1a 2e       	mov	r1, r26
    2916:	aa 1b       	sub	r26, r26
    2918:	bb 1b       	sub	r27, r27
    291a:	fd 01       	movw	r30, r26
    291c:	0d c0       	rjmp	.+26     	; 0x2938 <__udivmodsi4_ep>

0000291e <__udivmodsi4_loop>:
    291e:	aa 1f       	adc	r26, r26
    2920:	bb 1f       	adc	r27, r27
    2922:	ee 1f       	adc	r30, r30
    2924:	ff 1f       	adc	r31, r31
    2926:	a2 17       	cp	r26, r18
    2928:	b3 07       	cpc	r27, r19
    292a:	e4 07       	cpc	r30, r20
    292c:	f5 07       	cpc	r31, r21
    292e:	20 f0       	brcs	.+8      	; 0x2938 <__udivmodsi4_ep>
    2930:	a2 1b       	sub	r26, r18
    2932:	b3 0b       	sbc	r27, r19
    2934:	e4 0b       	sbc	r30, r20
    2936:	f5 0b       	sbc	r31, r21

00002938 <__udivmodsi4_ep>:
    2938:	66 1f       	adc	r22, r22
    293a:	77 1f       	adc	r23, r23
    293c:	88 1f       	adc	r24, r24
    293e:	99 1f       	adc	r25, r25
    2940:	1a 94       	dec	r1
    2942:	69 f7       	brne	.-38     	; 0x291e <__udivmodsi4_loop>
    2944:	60 95       	com	r22
    2946:	70 95       	com	r23
    2948:	80 95       	com	r24
    294a:	90 95       	com	r25
    294c:	9b 01       	movw	r18, r22
    294e:	ac 01       	movw	r20, r24
    2950:	bd 01       	movw	r22, r26
    2952:	cf 01       	movw	r24, r30
    2954:	08 95       	ret

00002956 <__prologue_saves__>:
    2956:	2f 92       	push	r2
    2958:	3f 92       	push	r3
    295a:	4f 92       	push	r4
    295c:	5f 92       	push	r5
    295e:	6f 92       	push	r6
    2960:	7f 92       	push	r7
    2962:	8f 92       	push	r8
    2964:	9f 92       	push	r9
    2966:	af 92       	push	r10
    2968:	bf 92       	push	r11
    296a:	cf 92       	push	r12
    296c:	df 92       	push	r13
    296e:	ef 92       	push	r14
    2970:	ff 92       	push	r15
    2972:	0f 93       	push	r16
    2974:	1f 93       	push	r17
    2976:	cf 93       	push	r28
    2978:	df 93       	push	r29
    297a:	cd b7       	in	r28, 0x3d	; 61
    297c:	de b7       	in	r29, 0x3e	; 62
    297e:	ca 1b       	sub	r28, r26
    2980:	db 0b       	sbc	r29, r27
    2982:	0f b6       	in	r0, 0x3f	; 63
    2984:	f8 94       	cli
    2986:	de bf       	out	0x3e, r29	; 62
    2988:	0f be       	out	0x3f, r0	; 63
    298a:	cd bf       	out	0x3d, r28	; 61
    298c:	09 94       	ijmp

0000298e <__epilogue_restores__>:
    298e:	2a 88       	ldd	r2, Y+18	; 0x12
    2990:	39 88       	ldd	r3, Y+17	; 0x11
    2992:	48 88       	ldd	r4, Y+16	; 0x10
    2994:	5f 84       	ldd	r5, Y+15	; 0x0f
    2996:	6e 84       	ldd	r6, Y+14	; 0x0e
    2998:	7d 84       	ldd	r7, Y+13	; 0x0d
    299a:	8c 84       	ldd	r8, Y+12	; 0x0c
    299c:	9b 84       	ldd	r9, Y+11	; 0x0b
    299e:	aa 84       	ldd	r10, Y+10	; 0x0a
    29a0:	b9 84       	ldd	r11, Y+9	; 0x09
    29a2:	c8 84       	ldd	r12, Y+8	; 0x08
    29a4:	df 80       	ldd	r13, Y+7	; 0x07
    29a6:	ee 80       	ldd	r14, Y+6	; 0x06
    29a8:	fd 80       	ldd	r15, Y+5	; 0x05
    29aa:	0c 81       	ldd	r16, Y+4	; 0x04
    29ac:	1b 81       	ldd	r17, Y+3	; 0x03
    29ae:	aa 81       	ldd	r26, Y+2	; 0x02
    29b0:	b9 81       	ldd	r27, Y+1	; 0x01
    29b2:	ce 0f       	add	r28, r30
    29b4:	d1 1d       	adc	r29, r1
    29b6:	0f b6       	in	r0, 0x3f	; 63
    29b8:	f8 94       	cli
    29ba:	de bf       	out	0x3e, r29	; 62
    29bc:	0f be       	out	0x3f, r0	; 63
    29be:	cd bf       	out	0x3d, r28	; 61
    29c0:	ed 01       	movw	r28, r26
    29c2:	08 95       	ret

000029c4 <_exit>:
    29c4:	f8 94       	cli

000029c6 <__stop_program>:
    29c6:	ff cf       	rjmp	.-2      	; 0x29c6 <__stop_program>
